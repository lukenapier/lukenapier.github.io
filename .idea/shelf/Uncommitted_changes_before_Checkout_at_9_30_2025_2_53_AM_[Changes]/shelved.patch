Index: CHANGELOG.md
===================================================================
diff --git a/CHANGELOG.md b/CHANGELOG.md
deleted file mode 100644
--- a/CHANGELOG.md	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
+++ /dev/null	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
@@ -1,142 +0,0 @@
-# Change Log
-All notable changes to this project will be documented in this file.
-
-## [unreleased] - yyyy-mm-dd - Woodcutting Rework pt2
-A continuation of work on the *Woodcutting Rework* project.
-### Added
-* added axeman’s folly and axeman’s folly m to Forester’s Grove Token Exchange (cost of 25/250)
-* added new potion types to PotionData:
-    * WEAK_SKILL(3, 0),
-    * NORMAL_SKILL(5, .10F),
-    * SUPER_SKILL(7, .20F),
-    * EXTREME_SKILL(10, .20F)
-* added axeman folly and matured variant to `PotionData` using `normal_skill` and `extreme_skill` boosts, and a guaranteed Spirit of the Grove spawn.
-* added Extreme Woodcutting potion to PotionData. TODO client sided changes and server sided-data changes for the items (currently uses null IDs).
-* added extreme wc potions to ItemDefinitions client sided.
-* added `::grovetier (number)` command to change grovetier.
-* added GroveForesterDialogue, including options to upgrade the tier of the grove and to open the grove token exchange.
-* to upgrade the grove tier, you must have completed x% of achievements (25/50/80/99%) and spend a certain amount of grove tokens.
-* added woodcutting capes and hood (costs 1m gp) to grove equipment shop.
-* added mahogany trees and logs
-
-### Changed
-* removed wilderness requirements from looting bag
-    * changed spirit of the grove loot to be a guaranteed item.
-* updated woodcutting skill guide
-* changed woodcutting tutor to be the main shop npc, and the forester to be the grove token npc.
-* updated the grove map, looks nicer now. more makeup to come in the future
-* big rewrite of Woodcutting Bonuses System.
-* gave all trees MUCH more health, making logs a lot slower to obtain.
-* SIGNIFICANTLY boosted the critical hit chance with felling axes.from 1-5% up to 55-75%
-### Fixed
-* updated PlayerAssistant skillRestore() method to include all skills instead of just combat skills.
-* added grovetier to player persist file and db scripts.
-* fixed a bug where when your inventory was empty you would stop chopping, but left it where if you drop an item you’ll continue chopping.
-
-
-
-
-
-## [0.0.3] - 2025-09-11 - Woodcutting Rework pt 1
-There has been much time, and many changes in between. MANY of the updates are undocumented. Again, I need to
-stress that this entire process has been a massive learning experience for me. Hopefully going forward, using this document, I will be able to track my updates much better and more clearly.
-
-With that being said, this update is mainly focused on The Woodcutting Rework!
-
-### Added
-* added new region "The grove" (Contains every type of tree choppable in Tamir).
-* added new npc "Ed Wood". (He transports the player to and from the grove)
-* new npc "Friendly Forester". Contains 2 new shops.
-    * added generic woodcutting axe shop, contains bronze-rune.
-* added grove token shop, and grove token currency
-    * contains Lumberjack outfit pieces
-    * Felling Axe Handle
-* Added Spirit of the Grove events
-    * occasionally occur while woodcutting, give loot and 'blessing of the grove'
-* Added 'Blessing of the Grove' Woodcutting buff which gives increased damage, crtical hits, auto banks logs, gives extra grove tokens, improves chop speed and improves progress towards your next log.
-* Added achievement section for Woodcutting achievements.
-* added `::wcbonuses` command to display wc bonuses
-### Changed
-* rebalanced old and added "new" trees
-    * added redwoods/celastrus/and crystal as 'regular' choppable trees
-* rebalanced old and added "new" axes, including felling axes and the ability to create them.
-* changed woodcutting to be more like "do damage to a tree based on your level", allowing for 'critical swings', slowing down log rates but keeping xp rates.
-* heavily buffed wc outfit effects
-* made bird's nests stackable and go straight to inventory
-* changed clue scrolls to be caskets for rewards isntead of clues directly
-* removed trees getting chopped down (temporary)
-* random events no longer teleport you for ignoring them
-### Fixed
-
-
-
-
-
-
-
-
-
-
-
-## [0.0.2] - 2025-07-30
-Update 2: Galvek, Gauntlet, various other updates
-### Added
-* started work on gauntlet
-    * no prep, only boss fight
-    * standard attacks mage/range, changes every 4
-    * changes prayer every 6th hit taken
-    * floor tile special: the floors flash a warning color before changing to damaging tiles
-    * tornadoes special: the hunllef periodically summons tornadoes that chase the player around the room.
-    * the lower health, the more tornadoes
-    * collection log (bowfa, blade of saeldor, crystal armor, pet tbd)
-    * teleport
-* added Galvek boss fight;
-    *  Standard attacks with mage/range/melee - 100%
-    *  dragonfire attack + pink dragonfire attack -100%
-    *  fire trap attack - 90% (need to set proper locations)
-    *  Gust of wind attack - 100%
-    *  tsunami attack - 100%
-    *  Earth stun attack - 100%
-    *  phase transitions - 90% (need to fix anims)
-    *  -dded teleport to interface, as well as collection log (drops dragon hunter crossbow, which will not be rewarded from Chambers)
-### Changed
-* started reworking smithing requirements
-    * all items are unlocked when that tier is unlocked (for example, mith bars are at level 30 so mith platelegs are also level 30)
-* added more to skillzone
-    * flax field and spinning wheel, altar, and a useless lectern
-* fixed super antifires
-* added widget to display antifire cooldown (functionality was already there, just wasn't used)
-### Fixed
-
-## [0.0.1] - 2025-07-23
-This update is my first time working with a 317, after about a few months of playing with 718s and learning the absolute basics.
-Now,
-### Added
-* added coal fragments:
-    *   use hammer on piece of coal to recieve 10 coal fragments.
-    *   coal fragments are used in place of coal when smelting.
-*   added custom mining objects and items
-*   objects(11378 > light anima rock, 2449 > dark anima rock, 28596 > dragonite rock)
-
-*   added 'Seren Mining' prestige perk, 50% chance to bank ores
-
-*   added ::skillz fully custom skill zone (will eventually become the new home)
-*   added a slightly broken xp tracker plugin
-*   changed starter bank to be much more humble
-*   added thieving on an afk timer
-### Changed
-* changed starter bank to be much more humble
-* edited edgeville and surrounding regions
-* updated mining skill guide
-*   updated pickaxe speeds and tiers
-*   changed base xp rates to 10x
-### Fixed
-
-
-
-
-## [unreleased] - yyyy-mm-dd
-Here we would have the update steps for 1.2.4 for people to follow.
-### Added
-### Changed
-### Fixed
Index: style.css
===================================================================
diff --git a/style.css b/style.css
deleted file mode 100644
--- a/style.css	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
+++ /dev/null	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
@@ -1,1035 +0,0 @@
-:root {
-    --bg-night: #050912;
-    --bg-night-alt: #0b1626;
-    --bg-panel: rgba(18, 27, 45, 0.9);
-    --bg-panel-alt: rgba(23, 35, 56, 0.85);
-    --bg-panel-soft: rgba(17, 26, 42, 0.8);
-    --paper: #f5efe0;
-    --paper-muted: #dcd2b8;
-    --ink: #231b10;
-    --ink-muted: #857353;
-    --accent: #c9a35b;
-    --accent-strong: #f5deb3;
-    --accent-dark: #8b6a32;
-    --accent-glow: rgba(201, 163, 91, 0.35);
-    --border-soft: rgba(242, 226, 186, 0.25);
-    --border-strong: rgba(242, 226, 186, 0.45);
-    --link: #f0d59d;
-    --link-hover: #fff0c9;
-    --shadow-soft: rgba(4, 6, 12, 0.38);
-    --shadow-strong: rgba(2, 4, 9, 0.65);
-    --success: #84bf87;
-    --warning: #e2af5c;
-    --danger: #d77363;
-    --text-soft: rgba(245, 239, 224, 0.78);
-}
-
-* {
-    box-sizing: border-box;
-}
-
-body {
-    margin: 0;
-    font-family: 'Source Sans 3', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
-    color: var(--paper);
-    background-color: var(--bg-night);
-    background-image:
-        radial-gradient(circle at 10% 0%, rgba(255, 240, 210, 0.08), transparent 55%),
-        radial-gradient(circle at 85% 20%, rgba(255, 236, 190, 0.05), transparent 60%),
-        linear-gradient(135deg, rgba(5, 10, 18, 0.95), rgba(8, 16, 28, 0.98));
-    line-height: 1.7;
-    min-height: 100vh;
-    position: relative;
-    overflow-x: hidden;
-}
-
-body::before {
-    content: "";
-    position: fixed;
-    inset: 0;
-    pointer-events: none;
-    background-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="160" height="160" viewBox="0 0 40 40" opacity="0.12"%3E%3Cpath fill="%23ffffff" fill-opacity="0.12" d="M0 39h1v1H0zm4-3h1v1H4zm3 3h1v1H7zm3-4h1v1H10zm5 4h1v1h-1zm4-6h1v1h-1zm4 3h1v1h-1zm3-5h1v1h-1zm5 2h1v1h-1z"/%3E%3C/svg%3E');
-    z-index: -1;
-    opacity: 0.35;
-}
-
-h1, h2, h3, h4, h5, h6 {
-    font-family: 'Cormorant Garamond', 'Cinzel', 'Times New Roman', serif;
-    color: var(--accent-strong);
-    margin-top: 0;
-}
-
-a {
-    color: var(--link);
-    text-decoration: none;
-    transition: color 0.2s ease;
-}
-
-a:hover,
-a:focus {
-    color: var(--link-hover);
-}
-
-p {
-    margin-top: 0;
-    color: var(--paper);
-}
-
-ul, ol {
-    margin-top: 0;
-    padding-left: 1.5rem;
-    color: var(--paper);
-}
-
-.skip-link {
-    position: absolute;
-    left: -9999px;
-    top: auto;
-    width: 1px;
-    height: 1px;
-    overflow: hidden;
-    z-index: 10;
-    background: var(--accent);
-    color: #1a140b;
-    padding: 0.5rem 1rem;
-    border-radius: 6px;
-    font-weight: 600;
-    text-decoration: none;
-}
-
-.skip-link:focus {
-    left: 1rem;
-    top: 1rem;
-    width: auto;
-    height: auto;
-    box-shadow: 0 6px 20px var(--shadow-strong);
-}
-
-.visually-hidden {
-    position: absolute;
-    width: 1px;
-    height: 1px;
-    padding: 0;
-    margin: -1px;
-    overflow: hidden;
-    clip: rect(0, 0, 0, 0);
-    border: 0;
-}
-
-.site-header,
-.primary-nav,
-.content-layout,
-.site-footer {
-    position: relative;
-    z-index: 1;
-}
-
-.site-header {
-    display: grid;
-    grid-template-columns: auto 1fr auto;
-    align-items: center;
-    gap: 1.75rem;
-    padding: 2.25rem clamp(1.5rem, 6vw, 4.5rem);
-    background: linear-gradient(135deg, rgba(20, 32, 52, 0.95), rgba(10, 18, 30, 0.97));
-    border-bottom: 2px solid var(--border-strong);
-    box-shadow: 0 16px 40px var(--shadow-strong);
-}
-
-.site-header__crest {
-    width: 84px;
-    height: 84px;
-    border-radius: 50%;
-    border: 2px solid rgba(255, 230, 190, 0.6);
-    display: grid;
-    place-items: center;
-    background: radial-gradient(circle at 30% 30%, rgba(255, 235, 205, 0.5), rgba(15, 26, 44, 0.95));
-    box-shadow: inset 0 0 25px rgba(255, 235, 204, 0.25), 0 12px 26px rgba(3, 6, 12, 0.65);
-}
-
-.crest-sigil {
-    font-size: 2.4rem;
-    filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.55));
-}
-
-.site-header__title h1 {
-    font-size: clamp(2rem, 3vw, 2.85rem);
-    letter-spacing: 0.14em;
-    text-transform: uppercase;
-    margin-bottom: 0.35rem;
-}
-
-.site-header__title p {
-    margin: 0;
-    color: var(--text-soft);
-    font-size: 1rem;
-    letter-spacing: 0.04em;
-}
-
-.site-header__aside {
-    display: flex;
-    flex-direction: column;
-    gap: 0.65rem;
-    align-items: flex-end;
-}
-
-.site-header__search {
-    display: flex;
-    align-items: center;
-    gap: 0.5rem;
-    background: rgba(8, 14, 24, 0.7);
-    padding: 0.5rem 0.75rem;
-    border-radius: 999px;
-    border: 1px solid rgba(255, 228, 190, 0.35);
-    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.35);
-}
-
-.site-header__search input[type="search"] {
-    background: transparent;
-    border: none;
-    color: var(--paper);
-    padding: 0.35rem 0.6rem;
-    min-width: 180px;
-    font-size: 0.95rem;
-}
-
-.site-header__search input::placeholder {
-    color: rgba(245, 235, 210, 0.65);
-}
-
-.site-header__search input:focus {
-    outline: none;
-}
-
-.site-header__search button {
-    background: linear-gradient(135deg, #e8cb8f, #9f7a33);
-    color: #1c1304;
-    border: none;
-    padding: 0.45rem 1.1rem;
-    border-radius: 999px;
-    font-weight: 700;
-    text-transform: uppercase;
-    font-size: 0.75rem;
-    letter-spacing: 0.1em;
-    cursor: pointer;
-    transition: transform 0.2s ease, box-shadow 0.2s ease;
-}
-
-.site-header__search button:hover {
-    transform: translateY(-1px);
-    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.4);
-}
-
-.site-header__search button:focus-visible {
-    outline: 2px solid #fff4d0;
-    outline-offset: 2px;
-}
-
-.site-header__update {
-    margin: 0;
-    font-size: 0.9rem;
-    color: rgba(245, 235, 210, 0.7);
-}
-
-.primary-nav {
-    display: flex;
-    justify-content: center;
-    flex-wrap: wrap;
-    gap: 1.25rem;
-    padding: 0.9rem 5vw;
-    background: linear-gradient(90deg, rgba(16, 25, 41, 0.9), rgba(21, 34, 56, 0.92));
-    border-bottom: 1px solid var(--border-soft);
-    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
-}
-
-.nav-link {
-    color: var(--text-soft);
-    text-transform: uppercase;
-    letter-spacing: 0.12em;
-    font-size: 0.82rem;
-    font-weight: 600;
-    position: relative;
-    padding-bottom: 0.2rem;
-}
-
-.nav-link::after {
-    content: "";
-    position: absolute;
-    left: 0;
-    bottom: -0.4rem;
-    width: 100%;
-    height: 2px;
-    background: transparent;
-    transition: background 0.2s ease, transform 0.2s ease;
-    transform-origin: center;
-}
-
-.nav-link:hover::after,
-.nav-link:focus::after,
-.nav-link.active::after {
-    background: var(--accent);
-    transform: scaleX(1);
-}
-
-.content-layout {
-    display: grid;
-    grid-template-columns: minmax(220px, 280px) minmax(0, 1fr) minmax(220px, 260px);
-    gap: clamp(1.75rem, 4vw, 3rem);
-    padding: 2.5rem clamp(1.5rem, 5vw, 4.5rem) 3.5rem;
-    align-items: start;
-}
-
-.column {
-    display: flex;
-    flex-direction: column;
-    gap: 1.5rem;
-}
-
-.portal-card {
-    background: var(--bg-panel);
-    border: 1px solid var(--border-soft);
-    border-radius: 18px;
-    padding: 1.5rem;
-    box-shadow: 0 12px 30px var(--shadow-soft);
-    position: relative;
-    overflow: hidden;
-}
-
-.portal-card::before {
-    content: "";
-    position: absolute;
-    inset: 0;
-    background: linear-gradient(135deg, rgba(201, 163, 91, 0.12), transparent 55%);
-    pointer-events: none;
-}
-
-.portal-card h3 {
-    margin-bottom: 0.85rem;
-    font-size: 1.25rem;
-    letter-spacing: 0.08em;
-    color: var(--accent-strong);
-}
-
-.portal-card ul {
-    list-style: none;
-    padding: 0;
-    margin: 0;
-    display: grid;
-    gap: 0.55rem;
-}
-
-.portal-card a {
-    color: var(--link);
-    display: inline-flex;
-    align-items: center;
-    gap: 0.35rem;
-    font-size: 0.95rem;
-}
-
-.portal-card a::before {
-    content: "\2022";
-    color: var(--accent);
-    font-size: 0.7rem;
-}
-
-.portal-card a:hover,
-.portal-card a:focus {
-    color: var(--link-hover);
-}
-
-.vault {
-    background: var(--bg-panel-alt);
-    border: 1px solid var(--border-strong);
-    border-radius: 22px;
-    padding: 2rem;
-    box-shadow: 0 18px 42px var(--shadow-soft);
-    backdrop-filter: blur(6px);
-}
-
-.vault__header {
-    display: flex;
-    justify-content: space-between;
-    gap: 1.5rem;
-    align-items: flex-start;
-    margin-bottom: 1.5rem;
-}
-
-.vault__header h2 {
-    font-size: clamp(1.8rem, 2.6vw, 2.4rem);
-    letter-spacing: 0.1em;
-    margin-bottom: 0.25rem;
-}
-
-.vault__header p {
-    color: var(--text-soft);
-    font-size: 1rem;
-}
-
-.vault__controls {
-    display: flex;
-    align-items: center;
-    gap: 0.85rem;
-    flex-wrap: wrap;
-}
-
-#vault-search {
-    background: rgba(8, 14, 24, 0.7);
-    border: 1px solid rgba(255, 230, 200, 0.35);
-    color: var(--paper);
-    padding: 0.6rem 0.85rem;
-    border-radius: 999px;
-    min-width: 220px;
-    font-size: 0.95rem;
-    transition: border-color 0.2s ease, box-shadow 0.2s ease;
-}
-
-#vault-search::placeholder {
-    color: rgba(245, 235, 210, 0.6);
-}
-
-#vault-search:focus {
-    outline: none;
-    border-color: var(--accent);
-    box-shadow: 0 0 0 3px rgba(201, 163, 91, 0.25);
-}
-
-.vault__status {
-    font-size: 0.9rem;
-    color: rgba(243, 233, 210, 0.7);
-}
-
-.vault__body {
-    display: grid;
-    grid-template-columns: minmax(220px, 280px) minmax(0, 1fr);
-    gap: 1.75rem;
-    align-items: stretch;
-}
-
-.vault__catalog {
-    background: rgba(7, 12, 20, 0.6);
-    border: 1px solid rgba(240, 225, 190, 0.2);
-    border-radius: 18px;
-    padding: 1.25rem;
-    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.05);
-}
-
-.vault__catalog-scroll {
-    max-height: 520px;
-    overflow-y: auto;
-    padding-right: 0.35rem;
-}
-
-.vault__catalog-scroll::-webkit-scrollbar {
-    width: 6px;
-}
-
-.vault__catalog-scroll::-webkit-scrollbar-thumb {
-    background: rgba(200, 175, 120, 0.4);
-    border-radius: 999px;
-}
-
-.vault-group {
-    border: 1px solid rgba(250, 235, 205, 0.15);
-    border-radius: 12px;
-    margin-bottom: 1rem;
-    background: rgba(20, 28, 44, 0.55);
-    overflow: hidden;
-}
-
-.vault-group:last-child {
-    margin-bottom: 0;
-}
-
-.vault-group__title {
-    list-style: none;
-    padding: 0.75rem 1rem;
-    font-size: 1rem;
-    letter-spacing: 0.08em;
-    color: var(--accent-strong);
-    cursor: pointer;
-    position: relative;
-}
-
-.vault-group[open] .vault-group__title {
-    background: rgba(201, 163, 91, 0.08);
-}
-
-.vault-group__title::marker {
-    color: var(--accent);
-}
-
-.vault-group__list {
-    list-style: none;
-    margin: 0;
-    padding: 0.5rem 0.75rem 0.75rem;
-    display: grid;
-    gap: 0.65rem;
-}
-
-.vault-note-link__button {
-    width: 100%;
-    text-align: left;
-    background: transparent;
-    border: 1px solid rgba(240, 226, 190, 0.18);
-    color: inherit;
-    border-radius: 12px;
-    padding: 0.75rem 0.85rem;
-    display: flex;
-    flex-direction: column;
-    gap: 0.35rem;
-    cursor: pointer;
-    transition: border-color 0.2s ease, transform 0.2s ease, background 0.2s ease;
-}
-
-.vault-note-link__button:hover,
-.vault-note-link__button:focus {
-    border-color: var(--accent);
-    background: rgba(201, 163, 91, 0.08);
-}
-
-.vault-note-link__button.is-active {
-    border-color: var(--accent);
-    background: rgba(201, 163, 91, 0.18);
-    box-shadow: 0 10px 24px rgba(0, 0, 0, 0.3);
-}
-
-.vault-note-link__title {
-    font-weight: 600;
-    letter-spacing: 0.04em;
-    color: var(--accent-strong);
-}
-
-.vault-note-link__summary,
-.vault-note-link__location {
-    font-size: 0.85rem;
-    color: rgba(240, 232, 210, 0.75);
-}
-
-.vault-note-link__updated {
-    font-size: 0.78rem;
-    color: rgba(240, 232, 210, 0.6);
-}
-
-.vault-note-link__tags,
-.vault-note-link__tag {
-    display: inline-flex;
-    flex-wrap: wrap;
-    gap: 0.35rem;
-    font-size: 0.72rem;
-}
-
-.vault-note-link__tag {
-    padding: 0.2rem 0.45rem;
-    border-radius: 999px;
-    background: rgba(201, 163, 91, 0.2);
-    color: rgba(250, 242, 220, 0.9);
-}
-
-.vault__note {
-    background: rgba(8, 14, 24, 0.7);
-    border: 1px solid rgba(245, 233, 210, 0.22);
-    border-radius: 18px;
-    padding: 1.6rem;
-    min-height: 480px;
-    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.03);
-}
-
-.vault__message {
-    margin: 0;
-    font-style: italic;
-    color: rgba(245, 235, 210, 0.75);
-}
-
-.vault__message--loading {
-    color: var(--accent-strong);
-}
-
-.vault__message--error {
-    color: var(--danger);
-    font-style: normal;
-}
-
-.vault__message--empty {
-    color: rgba(245, 235, 210, 0.65);
-}
-
-.vault__breadcrumbs {
-    margin-top: 1.75rem;
-    font-size: 0.85rem;
-    letter-spacing: 0.08em;
-    color: rgba(245, 235, 210, 0.7);
-    min-height: 1rem;
-    display: flex;
-    gap: 0.45rem;
-    flex-wrap: wrap;
-    opacity: 0;
-    transition: opacity 0.2s ease;
-}
-
-.vault__breadcrumbs.is-visible {
-    opacity: 1;
-}
-
-.vault__crumb {
-    padding: 0.15rem 0.35rem;
-    border-radius: 6px;
-    background: rgba(201, 163, 91, 0.15);
-}
-
-.vault__crumb-separator {
-    color: rgba(245, 235, 210, 0.5);
-}
-
-.vault-note__header {
-    margin-bottom: 1.25rem;
-    border-bottom: 1px solid rgba(240, 225, 190, 0.25);
-    padding-bottom: 1rem;
-}
-
-.vault-note__header h3 {
-    font-size: clamp(1.5rem, 2.2vw, 2rem);
-    letter-spacing: 0.08em;
-    color: var(--accent-strong);
-}
-
-.vault-note__meta {
-    display: flex;
-    flex-wrap: wrap;
-    gap: 0.65rem;
-    font-size: 0.85rem;
-    color: rgba(245, 235, 210, 0.75);
-}
-
-.vault-note__meta-item--summary {
-    font-style: italic;
-    color: rgba(245, 235, 210, 0.7);
-}
-
-.vault-note__tag {
-    display: inline-flex;
-    align-items: center;
-    padding: 0.2rem 0.55rem;
-    border-radius: 999px;
-    background: rgba(201, 163, 91, 0.22);
-    color: rgba(250, 240, 218, 0.9);
-    margin-left: 0.4rem;
-}
-
-.vault-note__content {
-    color: var(--paper);
-    font-size: 1rem;
-    line-height: 1.75;
-}
-
-.vault-note__content a {
-    color: var(--accent-strong);
-}
-
-.vault-note__heading {
-    margin-top: 1.6rem;
-    font-size: 1.3rem;
-    letter-spacing: 0.06em;
-    color: var(--accent-strong);
-}
-
-.vault-note__list {
-    padding-left: 1.2rem;
-}
-
-.vault-note__quote {
-    margin: 1rem 0;
-    padding: 1rem 1.25rem;
-    border-left: 3px solid var(--accent);
-    background: rgba(201, 163, 91, 0.08);
-    color: rgba(245, 235, 210, 0.85);
-    font-style: italic;
-}
-
-.vault-note__code-block {
-    background: rgba(0, 0, 0, 0.35);
-    padding: 1rem;
-    border-radius: 12px;
-    overflow-x: auto;
-    border: 1px solid rgba(255, 255, 255, 0.08);
-}
-
-.vault-note__table,
-.article-table,
-.vault-note__content table {
-    width: 100%;
-    border-collapse: collapse;
-    margin: 1.5rem 0;
-    background: rgba(8, 12, 20, 0.7);
-    border: 1px solid rgba(240, 225, 190, 0.25);
-    border-radius: 12px;
-    overflow: hidden;
-}
-
-.vault-note__content th,
-.vault-note__content td,
-.article-table th,
-.article-table td {
-    padding: 0.8rem 1rem;
-    border-bottom: 1px solid rgba(240, 225, 190, 0.15);
-    color: rgba(245, 235, 210, 0.85);
-}
-
-.vault-note__content th,
-.article-table th {
-    background: rgba(201, 163, 91, 0.12);
-    font-weight: 600;
-}
-
-.article {
-    background: var(--bg-panel);
-    border: 1px solid var(--border-strong);
-    border-radius: 20px;
-    padding: 1.85rem;
-    box-shadow: 0 16px 38px var(--shadow-soft);
-}
-
-.article__header {
-    border-bottom: 1px solid rgba(240, 225, 190, 0.25);
-    padding-bottom: 1.15rem;
-    margin-bottom: 1.35rem;
-}
-
-.article__meta {
-    color: rgba(245, 235, 210, 0.65);
-    font-size: 0.95rem;
-}
-
-.article__body {
-    color: var(--paper);
-    line-height: 1.8;
-}
-
-.article-subheading {
-    font-size: 1.25rem;
-    margin-top: 1.75rem;
-    letter-spacing: 0.06em;
-    color: var(--accent-strong);
-}
-
-.article-list {
-    margin: 1rem 0;
-    padding-left: 1.4rem;
-}
-
-.feature-grid {
-    margin-top: 2.5rem;
-}
-
-.feature-grid h3 {
-    font-size: 1.4rem;
-    letter-spacing: 0.1em;
-    margin-bottom: 1.2rem;
-}
-
-.feature-grid__cards {
-    display: grid;
-    gap: 1.25rem;
-    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
-}
-
-.feature-card {
-    background: rgba(9, 15, 26, 0.65);
-    border: 1px solid rgba(240, 225, 190, 0.2);
-    border-radius: 16px;
-    padding: 1.4rem;
-    box-shadow: 0 12px 28px rgba(0, 0, 0, 0.35);
-    position: relative;
-    overflow: hidden;
-}
-
-.feature-card::before {
-    content: "";
-    position: absolute;
-    inset: 0;
-    background: linear-gradient(135deg, rgba(201, 163, 91, 0.15), transparent 65%);
-    pointer-events: none;
-}
-
-.feature-card h4 {
-    margin-bottom: 0.6rem;
-    font-size: 1.2rem;
-}
-
-.feature-card p {
-    color: rgba(245, 235, 210, 0.72);
-}
-
-.feature-card__link {
-    display: inline-flex;
-    align-items: center;
-    margin-top: 0.85rem;
-    gap: 0.4rem;
-    font-weight: 600;
-    letter-spacing: 0.05em;
-}
-
-.feature-card__link::after {
-    content: "→";
-    font-size: 0.9rem;
-}
-
-.infobox {
-    background: rgba(9, 15, 26, 0.65);
-    border: 1px solid rgba(240, 225, 190, 0.25);
-    border-radius: 18px;
-    padding: 1.4rem;
-    box-shadow: 0 12px 26px rgba(0, 0, 0, 0.35);
-}
-
-.infobox__title {
-    font-size: 1.15rem;
-    letter-spacing: 0.08em;
-    margin-bottom: 0.9rem;
-}
-
-.infobox__content {
-    color: rgba(245, 235, 210, 0.8);
-    font-size: 0.95rem;
-}
-
-.infobox__list {
-    list-style: none;
-    padding: 0;
-    margin: 0;
-    display: grid;
-    gap: 0.65rem;
-}
-
-.player-status {
-    display: flex;
-    align-items: center;
-    gap: 0.6rem;
-    margin-bottom: 0.6rem;
-}
-
-.status-indicator {
-    width: 12px;
-    height: 12px;
-    border-radius: 50%;
-    background: rgba(255, 255, 255, 0.2);
-    position: relative;
-}
-
-.status-indicator::after {
-    content: "";
-    position: absolute;
-    inset: -6px;
-    border-radius: 50%;
-    border: 2px solid transparent;
-    opacity: 0.5;
-}
-
-.status-online {
-    background: var(--success);
-}
-
-.status-online::after {
-    border-color: rgba(134, 195, 138, 0.4);
-}
-
-.status-offline {
-    background: var(--danger);
-}
-
-.status-offline::after {
-    border-color: rgba(215, 115, 99, 0.4);
-}
-
-.status-unknown {
-    background: var(--warning);
-}
-
-.status-unknown::after {
-    border-color: rgba(226, 173, 92, 0.4);
-}
-
-.player-count,
-.player-updated {
-    margin: 0.35rem 0 0;
-    font-size: 0.92rem;
-    color: rgba(245, 235, 210, 0.75);
-}
-
-.site-footer {
-    text-align: center;
-    padding: 2rem 1.5rem 2.5rem;
-    color: rgba(245, 235, 210, 0.68);
-    font-size: 0.95rem;
-    letter-spacing: 0.08em;
-}
-
-.cursor-light {
-    position: fixed;
-    width: 320px;
-    height: 320px;
-    pointer-events: none;
-    background: radial-gradient(circle, rgba(201, 163, 91, 0.18), transparent 70%);
-    transform: translate(-50%, -50%);
-    z-index: 0;
-    mix-blend-mode: screen;
-}
-
-.error {
-    color: var(--danger);
-    font-weight: 600;
-}
-
-@media (max-width: 1200px) {
-    .content-layout {
-        grid-template-columns: minmax(200px, 240px) minmax(0, 1fr);
-    }
-
-    .column--right {
-        order: 3;
-        grid-column: 1 / -1;
-        display: grid;
-        grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
-        gap: 1.5rem;
-    }
-
-    .column--left {
-        grid-column: 1 / 2;
-    }
-
-    .column--main {
-        grid-column: 2 / -1;
-    }
-
-    .vault__body {
-        grid-template-columns: minmax(200px, 260px) minmax(0, 1fr);
-    }
-}
-
-@media (max-width: 1024px) {
-    .site-header {
-        grid-template-columns: auto 1fr;
-        grid-template-rows: auto auto;
-    }
-
-    .site-header__aside {
-        grid-column: 1 / -1;
-        align-items: flex-start;
-        flex-direction: row;
-        flex-wrap: wrap;
-    }
-
-    .primary-nav {
-        gap: 1rem;
-    }
-}
-
-@media (max-width: 900px) {
-    .content-layout {
-        grid-template-columns: 1fr;
-        padding: 2.2rem clamp(1.25rem, 6vw, 3rem);
-    }
-
-    .column--main,
-    .column--left,
-    .column--right {
-        grid-column: 1 / -1;
-    }
-
-    .column--right {
-        display: flex;
-        flex-direction: column;
-    }
-
-    .vault__header {
-        flex-direction: column;
-        align-items: stretch;
-    }
-
-    .vault__body {
-        grid-template-columns: 1fr;
-    }
-
-    .vault__catalog {
-        order: 2;
-        max-height: none;
-    }
-
-    .vault__catalog-scroll {
-        max-height: 360px;
-    }
-
-    .vault__note {
-        order: 1;
-        min-height: 320px;
-    }
-}
-
-@media (max-width: 720px) {
-    .site-header {
-        padding: 1.85rem 1.5rem;
-        gap: 1.25rem;
-    }
-
-    .site-header__search input[type="search"] {
-        min-width: 140px;
-    }
-
-    .vault {
-        padding: 1.6rem;
-    }
-
-    #vault-search {
-        min-width: 0;
-        flex: 1;
-    }
-
-    .vault__controls {
-        width: 100%;
-    }
-
-    .vault__breadcrumbs {
-        margin-top: 1.35rem;
-    }
-}
-
-@media (max-width: 540px) {
-    .site-header {
-        grid-template-columns: 1fr;
-        text-align: center;
-    }
-
-    .site-header__aside {
-        align-items: center;
-        justify-content: center;
-    }
-
-    .primary-nav {
-        justify-content: center;
-    }
-
-    .vault-note__meta {
-        flex-direction: column;
-        align-items: flex-start;
-    }
-
-    .feature-grid__cards {
-        grid-template-columns: 1fr;
-    }
-
-    .portal-card,
-    .article,
-    .infobox,
-    .feature-card {
-        padding: 1.25rem;
-    }
-}
-
-@media (prefers-reduced-motion: reduce) {
-    *,
-    *::before,
-    *::after {
-        animation-duration: 0.01ms !important;
-        animation-iteration-count: 1 !important;
-        transition-duration: 0.01ms !important;
-        scroll-behavior: auto !important;
-    }
-}
Index: script.js
===================================================================
diff --git a/script.js b/script.js
deleted file mode 100644
--- a/script.js	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
+++ /dev/null	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
@@ -1,845 +0,0 @@
-// Cursor light effect
-const cursorLight = document.querySelector('.cursor-light');
-document.addEventListener('mousemove', (event) => {
-    if (!cursorLight) return;
-    cursorLight.style.left = `${event.clientX}px`;
-    cursorLight.style.top = `${event.clientY}px`;
-});
-
-const markdownConverter = new showdown.Converter({
-    tables: true,
-    ghCodeBlocks: true,
-    simplifiedAutoLink: true,
-    strikethrough: true,
-    tasklists: true,
-    simpleLineBreaks: true
-});
-
-const playerCountSpan = document.getElementById('player-count');
-const playerStatusIndicator = document.getElementById('player-status-indicator');
-const playerStatusText = document.getElementById('player-status-text');
-const playerUpdatedSpan = document.getElementById('player-updated');
-const changelogMeta = document.getElementById('changelog-updated');
-const vaultCatalogContainer = document.getElementById('vault-catalog');
-const vaultNoteContainer = document.getElementById('vault-note');
-const vaultStatus = document.getElementById('vault-status');
-const vaultBreadcrumbs = document.getElementById('vault-breadcrumbs');
-const vaultSearchInput = document.getElementById('vault-search');
-const vaultRefresh = document.getElementById('vault-refresh');
-
-const vaultManifestCandidates = [
-    'vault/manifest.json',
-    'vault/index.json',
-    'vault/_manifest.json',
-    'vault/catalog.json',
-    'vault/data.json'
-];
-
-let lastPlayerCountTimestamp = null;
-let hasPlayerResponse = false;
-let vaultEntries = [];
-let filteredVaultEntries = [];
-let activeVaultPath = null;
-
-function setStatusIndicator(state) {
-    if (!playerStatusIndicator || !playerStatusText) return;
-
-    playerStatusIndicator.classList.remove('status-online', 'status-offline', 'status-unknown');
-
-    switch (state) {
-        case 'online':
-            playerStatusIndicator.classList.add('status-online');
-            playerStatusText.textContent = 'Realm is online';
-            break;
-        case 'offline':
-            playerStatusIndicator.classList.add('status-offline');
-            playerStatusText.textContent = 'Realm offline';
-            break;
-        default:
-            playerStatusIndicator.classList.add('status-unknown');
-            playerStatusText.textContent = 'Checking realm...';
-            break;
-    }
-}
-
-function formatRelativeTime(date) {
-    const seconds = Math.floor((Date.now() - date.getTime()) / 1000);
-
-    if (seconds < 5) return 'just now';
-    if (seconds < 60) return `${seconds} second${seconds === 1 ? '' : 's'} ago`;
-
-    const minutes = Math.floor(seconds / 60);
-    if (minutes < 60) return `${minutes} minute${minutes === 1 ? '' : 's'} ago`;
-
-    const hours = Math.floor(minutes / 60);
-    if (hours < 24) return `${hours} hour${hours === 1 ? '' : 's'} ago`;
-
-    const days = Math.floor(hours / 24);
-    return `${days} day${days === 1 ? '' : 's'} ago`;
-}
-
-function updatePlayerTimestamp() {
-    if (!playerUpdatedSpan || !hasPlayerResponse) return;
-
-    if (!lastPlayerCountTimestamp) {
-        playerUpdatedSpan.textContent = 'Unavailable';
-        return;
-    }
-
-    playerUpdatedSpan.textContent = formatRelativeTime(lastPlayerCountTimestamp);
-}
-
-function fetchPlayerCount() {
-    const url = `http://tamir.great-site.net/player_count.php?t=${Date.now()}`;
-
-    fetch(url)
-        .then((response) => response.json())
-        .then((data) => {
-            hasPlayerResponse = true;
-            if (data.status === 'online') {
-                if (playerCountSpan) {
-                    playerCountSpan.textContent = data.players;
-                }
-                lastPlayerCountTimestamp = new Date();
-                setStatusIndicator('online');
-                updatePlayerTimestamp();
-            } else {
-                if (playerCountSpan) {
-                    playerCountSpan.textContent = 'Offline';
-                }
-                lastPlayerCountTimestamp = null;
-                setStatusIndicator('offline');
-                updatePlayerTimestamp();
-            }
-        })
-        .catch((error) => {
-            console.error('Error fetching player count:', error);
-            hasPlayerResponse = true;
-            if (playerCountSpan) {
-                playerCountSpan.textContent = '--';
-            }
-            lastPlayerCountTimestamp = null;
-            setStatusIndicator('offline');
-            updatePlayerTimestamp();
-        });
-}
-
-function formatLatestHeading(line) {
-    const sanitized = line.replace(/^##\s*/, '').trim();
-    const parts = sanitized.split(' - ');
-
-    if (parts.length >= 3) {
-        const version = parts[0].replace(/^[\[]|[\]]$/g, '');
-        const date = parts[1].trim();
-        const title = parts.slice(2).join(' - ').trim();
-
-        const displayParts = [];
-        if (title) {
-            displayParts.push(title);
-        }
-
-        if (/^\d{4}-\d{2}-\d{2}$/.test(date)) {
-            displayParts.push(date);
-        }
-
-        if (version) {
-            const formattedVersion = version.toLowerCase() === 'unreleased'
-                ? 'Unreleased build'
-                : `Version ${version}`;
-            displayParts.push(formattedVersion);
-        }
-
-        return displayParts.join(' • ');
-    }
-
-    return sanitized.replace(/[\[\]]/g, '');
-}
-
-function extractLatestHeading(markdown) {
-    const lines = markdown.split('\n');
-    for (const rawLine of lines) {
-        const line = rawLine.trim();
-        if (line.startsWith('## ')) {
-            return formatLatestHeading(line);
-        }
-    }
-    return null;
-}
-
-function enhanceChangelog(container) {
-    if (!container) return;
-
-    container.querySelectorAll('h3').forEach((heading) => {
-        heading.classList.add('article-subheading');
-    });
-
-    container.querySelectorAll('ul').forEach((list) => {
-        list.classList.add('article-list');
-    });
-
-    container.querySelectorAll('table').forEach((table) => {
-        table.classList.add('article-table');
-    });
-}
-
-function fetchChangelog() {
-    fetch('CHANGELOG.md')
-        .then((response) => response.text())
-        .then((markdown) => {
-            const html = markdownConverter.makeHtml(markdown);
-            const changelogContainer = document.getElementById('changelog-content');
-
-            if (changelogContainer) {
-                changelogContainer.innerHTML = html;
-                enhanceChangelog(changelogContainer);
-            }
-
-            const latestHeading = extractLatestHeading(markdown);
-            if (changelogMeta) {
-                changelogMeta.textContent = latestHeading || 'Latest records catalogued';
-            }
-        })
-        .catch((error) => {
-            console.error('Error fetching changelog:', error);
-            const changelogContainer = document.getElementById('changelog-content');
-            if (changelogContainer) {
-                changelogContainer.innerHTML = '<p class="error">Error: Could not load the changelog records.</p>';
-            }
-            if (changelogMeta) {
-                changelogMeta.textContent = 'Unable to retrieve records';
-            }
-        });
-}
-
-function normalizeTags(tags) {
-    if (!tags) return [];
-    if (Array.isArray(tags)) {
-        return tags.map(String).map((tag) => tag.replace(/^#/, '').trim()).filter(Boolean);
-    }
-    if (typeof tags === 'string') {
-        return tags
-            .split(/[,#]/)
-            .map((tag) => tag.trim())
-            .filter(Boolean);
-    }
-    return [];
-}
-
-function deriveTitleFromPath(path) {
-    if (!path) return 'Untitled note';
-    const normalized = path.replace(/\\/g, '/');
-    const segments = normalized.split('/').filter(Boolean);
-    const fileName = segments.pop() || normalized;
-    return fileName.replace(/\.md$/i, '').replace(/[-_]/g, ' ').replace(/\s+/g, ' ').replace(/\b\w/g, (char) => char.toUpperCase());
-}
-
-function deriveAncestorsFromPath(path) {
-    if (!path) return [];
-    const normalized = path.replace(/\\/g, '/');
-    const segments = normalized.split('/').filter(Boolean);
-    segments.pop();
-    return segments;
-}
-
-function addVaultEntry(entry) {
-    if (!entry || !entry.path) return;
-
-    const normalizedPath = entry.path.replace(/\\/g, '/');
-    const ancestors = Array.isArray(entry.ancestors) && entry.ancestors.length
-        ? entry.ancestors
-        : deriveAncestorsFromPath(normalizedPath);
-
-    const parsedEntry = {
-        title: entry.title || deriveTitleFromPath(normalizedPath),
-        path: normalizedPath,
-        ancestors: ancestors.filter(Boolean),
-        tags: normalizeTags(entry.tags),
-        summary: entry.summary || entry.excerpt || '',
-        updated: entry.updated || entry.modified || entry.mtime || null,
-        pinned: Boolean(entry.pinned)
-    };
-
-    if (entry.order !== undefined) {
-        const parsedOrder = Number(entry.order);
-        if (!Number.isNaN(parsedOrder)) {
-            parsedEntry.order = parsedOrder;
-        }
-    }
-
-    vaultEntries.push(parsedEntry);
-}
-
-function parseManifestNode(node, ancestors = []) {
-    if (!node) return;
-
-    if (Array.isArray(node)) {
-        node.forEach((child) => parseManifestNode(child, ancestors));
-        return;
-    }
-
-    if (typeof node === 'string') {
-        addVaultEntry({ path: node });
-        return;
-    }
-
-    if (typeof node !== 'object') {
-        return;
-    }
-
-    if (node.type && (node.type === 'folder' || node.type === 'directory')) {
-        const folderName = node.name || node.title || node.label || node.path || '';
-        const nextAncestors = folderName ? [...ancestors, folderName] : ancestors;
-        const children = node.children || node.notes || node.files || node.items;
-        if (children) {
-            parseManifestNode(children, nextAncestors);
-        }
-        return;
-    }
-
-    if (node.type && (node.type === 'note' || node.type === 'file' || node.type === 'document')) {
-        addVaultEntry({
-            title: node.title || node.name,
-            path: node.path || node.file || node.url || node.source,
-            tags: node.tags,
-            summary: node.summary || node.description || node.excerpt,
-            updated: node.updated || node.modified || node.mtime,
-            ancestors: node.ancestors || ancestors,
-            pinned: node.pinned,
-            order: node.order
-        });
-        return;
-    }
-
-    if (node.notes || node.children || node.items || node.files) {
-        const folderName = node.name || node.title || node.label || node.folder || '';
-        const nextAncestors = folderName ? [...ancestors, folderName] : ancestors;
-        const collection = node.notes || node.children || node.items || node.files;
-        if (Array.isArray(collection)) {
-            collection.forEach((child) => parseManifestNode(child, nextAncestors));
-        } else {
-            parseManifestNode(collection, nextAncestors);
-        }
-    } else if (node.path || node.file) {
-        addVaultEntry({
-            title: node.title || node.name,
-            path: node.path || node.file,
-            tags: node.tags,
-            summary: node.summary || node.description,
-            updated: node.updated || node.modified,
-            ancestors: node.ancestors || ancestors,
-            pinned: node.pinned,
-            order: node.order
-        });
-    }
-}
-
-function buildVaultEntries(manifest) {
-    vaultEntries = [];
-
-    if (!manifest) return;
-
-    if (manifest.collections && Array.isArray(manifest.collections)) {
-        manifest.collections.forEach((collection) => {
-            const baseAncestors = [collection.name || collection.title || collection.folder || 'Collection'];
-            if (collection.notes) {
-                parseManifestNode(collection.notes, baseAncestors);
-            }
-        });
-    } else if (manifest.notes || manifest.children || manifest.items || manifest.files) {
-        parseManifestNode(manifest.notes || manifest.children || manifest.items || manifest.files, []);
-    } else {
-        parseManifestNode(manifest, []);
-    }
-
-    const deduped = new Map();
-    vaultEntries.forEach((entry) => {
-        if (!entry.path) return;
-        if (!deduped.has(entry.path)) {
-            deduped.set(entry.path, entry);
-            return;
-        }
-
-        const existing = deduped.get(entry.path);
-        if (!existing.summary && entry.summary) {
-            existing.summary = entry.summary;
-        }
-        if (!existing.updated && entry.updated) {
-            existing.updated = entry.updated;
-        }
-        if (entry.tags && entry.tags.length) {
-            const mergedTags = new Set([...(existing.tags || []), ...entry.tags]);
-            existing.tags = Array.from(mergedTags);
-        }
-        if (entry.pinned) {
-            existing.pinned = true;
-        }
-    });
-
-    vaultEntries = Array.from(deduped.values());
-    vaultEntries.sort((a, b) => {
-        if (a.pinned && !b.pinned) return -1;
-        if (!a.pinned && b.pinned) return 1;
-        if (a.order !== undefined && b.order === undefined) return -1;
-        if (a.order === undefined && b.order !== undefined) return 1;
-        if (a.order !== undefined && b.order !== undefined && a.order !== b.order) {
-            return a.order - b.order;
-        }
-        return a.title.localeCompare(b.title, undefined, { sensitivity: 'base' });
-    });
-}
-
-function setActiveVaultLink(path) {
-    if (!vaultCatalogContainer) return;
-    const buttons = vaultCatalogContainer.querySelectorAll('.vault-note-link__button');
-    buttons.forEach((button) => {
-        if (button.dataset.path === path) {
-            button.classList.add('is-active');
-            button.setAttribute('aria-current', 'true');
-        } else {
-            button.classList.remove('is-active');
-            button.removeAttribute('aria-current');
-        }
-    });
-}
-
-function displayVaultMessage(message, type = 'info') {
-    if (!vaultNoteContainer) return;
-    const paragraph = document.createElement('p');
-    paragraph.className = `vault__message vault__message--${type}`;
-    paragraph.textContent = message;
-    vaultNoteContainer.innerHTML = '';
-    vaultNoteContainer.appendChild(paragraph);
-    if (type === 'loading') {
-        vaultNoteContainer.setAttribute('aria-busy', 'true');
-    } else {
-        vaultNoteContainer.removeAttribute('aria-busy');
-    }
-}
-
-function updateVaultBreadcrumbs(entry) {
-    if (!vaultBreadcrumbs) return;
-    const crumbs = [...(entry.ancestors || []), entry.title].filter(Boolean);
-    vaultBreadcrumbs.innerHTML = '';
-    if (!crumbs.length) {
-        vaultBreadcrumbs.classList.remove('is-visible');
-        return;
-    }
-
-    vaultBreadcrumbs.classList.add('is-visible');
-    const fragment = document.createDocumentFragment();
-    crumbs.forEach((crumb, index) => {
-        const crumbSpan = document.createElement('span');
-        crumbSpan.className = 'vault__crumb';
-        crumbSpan.textContent = crumb;
-        fragment.appendChild(crumbSpan);
-        if (index < crumbs.length - 1) {
-            const divider = document.createElement('span');
-            divider.className = 'vault__crumb-separator';
-            divider.setAttribute('aria-hidden', 'true');
-            divider.textContent = '›';
-            fragment.appendChild(divider);
-        }
-    });
-    vaultBreadcrumbs.appendChild(fragment);
-}
-
-function formatVaultDate(value) {
-    if (!value) return 'Unknown date';
-    const date = value instanceof Date ? value : new Date(value);
-    if (Number.isNaN(date.getTime())) {
-        return typeof value === 'string' ? value : 'Unknown date';
-    }
-    return date.toLocaleDateString(undefined, {
-        year: 'numeric',
-        month: 'short',
-        day: 'numeric'
-    });
-}
-
-function formatVaultTimestamp(value) {
-    if (!value) return 'Unknown';
-    const date = value instanceof Date ? value : new Date(value);
-    if (Number.isNaN(date.getTime())) {
-        return typeof value === 'string' ? value : 'Unknown';
-    }
-    return date.toLocaleString(undefined, {
-        year: 'numeric',
-        month: 'short',
-        day: 'numeric',
-        hour: '2-digit',
-        minute: '2-digit'
-    });
-}
-
-function parseFrontMatter(source) {
-    const meta = {};
-    const lines = source.split(/\r?\n/);
-    let currentKey = null;
-
-    lines.forEach((rawLine) => {
-        const line = rawLine.trim();
-        if (!line) return;
-
-        if (/^[A-Za-z0-9_.-]+\s*:/u.test(line)) {
-            const [keyPart, ...rest] = rawLine.split(':');
-            currentKey = keyPart.trim();
-            const valuePart = rest.join(':').trim();
-            if (!valuePart) {
-                meta[currentKey] = [];
-            } else if (valuePart.startsWith('[') && valuePart.endsWith(']')) {
-                meta[currentKey] = valuePart
-                    .slice(1, -1)
-                    .split(',')
-                    .map((item) => item.trim())
-                    .filter(Boolean);
-            } else if (valuePart === 'true' || valuePart === 'false') {
-                meta[currentKey] = valuePart === 'true';
-            } else {
-                meta[currentKey] = valuePart;
-            }
-        } else if (currentKey && rawLine.trim().startsWith('-')) {
-            const value = rawLine.replace(/^\s*-\s*/, '').trim();
-            if (!Array.isArray(meta[currentKey])) {
-                meta[currentKey] = meta[currentKey] ? [meta[currentKey]] : [];
-            }
-            if (value) {
-                meta[currentKey].push(value);
-            }
-        }
-    });
-
-    return meta;
-}
-
-function stripFrontMatter(markdown) {
-    const frontMatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n?/;
-    const match = markdown.match(frontMatterRegex);
-    if (!match) {
-        return { meta: {}, body: markdown };
-    }
-
-    const meta = parseFrontMatter(match[1]);
-    const body = markdown.slice(match[0].length);
-    return { meta, body };
-}
-
-function enhanceVaultContent(container) {
-    if (!container) return;
-    container.querySelectorAll('h1, h2, h3').forEach((heading) => {
-        heading.classList.add('vault-note__heading');
-    });
-    container.querySelectorAll('ul, ol').forEach((list) => {
-        list.classList.add('vault-note__list');
-    });
-    container.querySelectorAll('blockquote').forEach((quote) => {
-        quote.classList.add('vault-note__quote');
-    });
-    container.querySelectorAll('pre').forEach((block) => {
-        block.classList.add('vault-note__code-block');
-    });
-    container.querySelectorAll('table').forEach((table) => {
-        table.classList.add('vault-note__table');
-    });
-}
-
-function loadVaultNote(entry) {
-    if (!vaultNoteContainer || !entry) return;
-    activeVaultPath = entry.path;
-    setActiveVaultLink(entry.path);
-    updateVaultBreadcrumbs(entry);
-    displayVaultMessage(`Transcribing "${entry.title}"…`, 'loading');
-
-    const encodedPath = encodeURI(entry.path).replace(/#/g, '%23');
-
-    fetch(encodedPath)
-        .then((response) => {
-            if (!response.ok) {
-                throw new Error(`Failed to retrieve ${entry.path}`);
-            }
-            return response.text();
-        })
-        .then((markdown) => {
-            const { meta, body } = stripFrontMatter(markdown);
-            const html = markdownConverter.makeHtml(body);
-
-            const tags = normalizeTags(meta.tags || entry.tags);
-            const updated = meta.updated || meta.modified || meta.date || entry.updated;
-            const summary = meta.summary || meta.description || entry.summary;
-            const noteTitle = meta.title || entry.title;
-
-            const fragment = document.createDocumentFragment();
-            const header = document.createElement('header');
-            header.className = 'vault-note__header';
-
-            const heading = document.createElement('h3');
-            heading.textContent = noteTitle;
-            header.appendChild(heading);
-
-            const metaLine = document.createElement('div');
-            metaLine.className = 'vault-note__meta';
-
-            if (updated) {
-                const updatedSpan = document.createElement('span');
-                updatedSpan.className = 'vault-note__meta-item';
-                updatedSpan.textContent = `Last updated ${formatVaultDate(updated)}`;
-                metaLine.appendChild(updatedSpan);
-            }
-
-            if (summary) {
-                const summarySpan = document.createElement('span');
-                summarySpan.className = 'vault-note__meta-item vault-note__meta-item--summary';
-                summarySpan.textContent = summary;
-                metaLine.appendChild(summarySpan);
-            }
-
-            if (tags.length) {
-                const tagsSpan = document.createElement('span');
-                tagsSpan.className = 'vault-note__meta-item';
-                tagsSpan.setAttribute('data-label', 'Tags');
-                tags.forEach((tag) => {
-                    const tagChip = document.createElement('span');
-                    tagChip.className = 'vault-note__tag';
-                    tagChip.textContent = tag;
-                    tagsSpan.appendChild(tagChip);
-                });
-                metaLine.appendChild(tagsSpan);
-            }
-
-            if (metaLine.children.length) {
-                header.appendChild(metaLine);
-            }
-
-            fragment.appendChild(header);
-
-            const content = document.createElement('div');
-            content.className = 'vault-note__content';
-            content.innerHTML = html;
-            enhanceVaultContent(content);
-            fragment.appendChild(content);
-
-            vaultNoteContainer.innerHTML = '';
-            vaultNoteContainer.removeAttribute('aria-busy');
-            vaultNoteContainer.appendChild(fragment);
-        })
-        .catch((error) => {
-            console.error('Error loading vault entry:', error);
-            displayVaultMessage('We could not transcribe this manuscript. Ensure the note exists within the vault.', 'error');
-        });
-}
-
-function renderVaultCatalog(entries) {
-    if (!vaultCatalogContainer) return;
-    vaultCatalogContainer.innerHTML = '';
-
-    if (!entries || !entries.length) {
-        displayVaultMessage('No manuscripts match the current view. Adjust your filters to continue.', 'empty');
-        if (vaultStatus) {
-            vaultStatus.textContent = 'No manuscripts indexed';
-        }
-        return;
-    }
-
-    const grouped = new Map();
-    entries.forEach((entry) => {
-        const groupName = entry.ancestors && entry.ancestors.length ? entry.ancestors[0] : 'Loose leaves';
-        if (!grouped.has(groupName)) {
-            grouped.set(groupName, []);
-        }
-        grouped.get(groupName).push(entry);
-    });
-
-    const groupNames = Array.from(grouped.keys()).sort((a, b) => a.localeCompare(b, undefined, { sensitivity: 'base' }));
-
-    groupNames.forEach((groupName) => {
-        const groupNotes = grouped.get(groupName);
-        const details = document.createElement('details');
-        details.className = 'vault-group';
-
-        const summary = document.createElement('summary');
-        summary.className = 'vault-group__title';
-        summary.textContent = groupName;
-        details.appendChild(summary);
-
-        const list = document.createElement('ul');
-        list.className = 'vault-group__list';
-
-        groupNotes
-            .slice()
-            .sort((a, b) => a.title.localeCompare(b.title, undefined, { sensitivity: 'base' }))
-            .forEach((entry) => {
-                const item = document.createElement('li');
-                item.className = 'vault-note-link';
-
-                const button = document.createElement('button');
-                button.type = 'button';
-                button.className = 'vault-note-link__button';
-                button.dataset.path = entry.path;
-
-                const titleSpan = document.createElement('span');
-                titleSpan.className = 'vault-note-link__title';
-                titleSpan.textContent = entry.title;
-                button.appendChild(titleSpan);
-
-                if (entry.summary) {
-                    const summarySpan = document.createElement('span');
-                    summarySpan.className = 'vault-note-link__summary';
-                    summarySpan.textContent = entry.summary;
-                    button.appendChild(summarySpan);
-                } else if (entry.ancestors && entry.ancestors.length > 1) {
-                    const locationSpan = document.createElement('span');
-                    locationSpan.className = 'vault-note-link__location';
-                    locationSpan.textContent = entry.ancestors.slice(1).join(' › ');
-                    button.appendChild(locationSpan);
-                }
-
-                if (entry.updated) {
-                    const updatedSpan = document.createElement('span');
-                    updatedSpan.className = 'vault-note-link__updated';
-                    updatedSpan.textContent = formatVaultDate(entry.updated);
-                    button.appendChild(updatedSpan);
-                }
-
-                if (entry.tags && entry.tags.length) {
-                    const tagsContainer = document.createElement('span');
-                    tagsContainer.className = 'vault-note-link__tags';
-                    entry.tags.slice(0, 3).forEach((tag) => {
-                        const tagChip = document.createElement('span');
-                        tagChip.className = 'vault-note-link__tag';
-                        tagChip.textContent = tag;
-                        tagsContainer.appendChild(tagChip);
-                    });
-                    button.appendChild(tagsContainer);
-                }
-
-                button.addEventListener('click', () => loadVaultNote(entry));
-
-                item.appendChild(button);
-                list.appendChild(item);
-            });
-
-        const groupHasActive = groupNotes.some((note) => note.path === activeVaultPath);
-        if (groupHasActive || groupNames.length <= 4) {
-            details.open = true;
-        }
-
-        details.appendChild(list);
-        vaultCatalogContainer.appendChild(details);
-    });
-
-    if (vaultStatus) {
-        vaultStatus.textContent = `${entries.length} manuscript${entries.length === 1 ? '' : 's'} catalogued`;
-    }
-
-    setActiveVaultLink(activeVaultPath);
-}
-
-function handleVaultSearch(event) {
-    const query = event.target.value.trim().toLowerCase();
-    if (!query) {
-        filteredVaultEntries = [...vaultEntries];
-    } else {
-        filteredVaultEntries = vaultEntries.filter((entry) => {
-            const haystack = [
-                entry.title,
-                ...(entry.ancestors || []),
-                ...(entry.tags || []),
-                entry.summary || ''
-            ]
-                .join(' ')
-                .toLowerCase();
-            return haystack.includes(query);
-        });
-    }
-
-    renderVaultCatalog(filteredVaultEntries);
-
-    if (!filteredVaultEntries.length) {
-        displayVaultMessage('No manuscripts match this search. Adjust your query to continue.', 'empty');
-        return;
-    }
-
-    const activeStillVisible = filteredVaultEntries.some((entry) => entry.path === activeVaultPath);
-    if (!activeStillVisible) {
-        loadVaultNote(filteredVaultEntries[0]);
-    }
-}
-
-function fetchVaultManifest() {
-    if (!vaultCatalogContainer) return;
-
-    displayVaultMessage('Awaiting a manuscript selection.', 'info');
-    if (vaultStatus) {
-        vaultStatus.textContent = 'Indexing the shelves…';
-    }
-
-    requestVaultManifest(vaultManifestCandidates)
-        .then((manifest) => {
-            buildVaultEntries(manifest);
-            if (!vaultEntries.length) {
-                displayVaultMessage('The vault manifest contains no manuscripts yet. Add notes to the vault to begin.', 'empty');
-                if (vaultStatus) {
-                    vaultStatus.textContent = 'No manuscripts catalogued';
-                }
-                return;
-            }
-
-            filteredVaultEntries = [...vaultEntries];
-            renderVaultCatalog(filteredVaultEntries);
-            const initialEntry = vaultEntries.find((entry) => entry.pinned) || vaultEntries[0];
-            loadVaultNote(initialEntry);
-
-            if (vaultRefresh) {
-                vaultRefresh.textContent = formatVaultTimestamp(new Date());
-            }
-        })
-        .catch((error) => {
-            console.error('Error loading vault manifest:', error);
-            displayVaultMessage('We could not retrieve the vault manifest. Ensure a manifest file is available inside the vault directory.', 'error');
-            if (vaultStatus) {
-                vaultStatus.textContent = 'Unable to index the vault';
-            }
-            if (vaultRefresh) {
-                vaultRefresh.textContent = 'Unavailable';
-            }
-        });
-}
-
-function requestVaultManifest(candidates, index = 0) {
-    if (index >= candidates.length) {
-        return Promise.reject(new Error('No manifest candidates resolved'));
-    }
-
-    const source = candidates[index];
-
-    return fetch(source)
-        .then((response) => {
-            if (!response.ok) {
-                throw new Error(`Manifest request for ${source} failed with status ${response.status}`);
-            }
-            return response.json();
-        })
-        .catch((error) => {
-            if (index < candidates.length - 1) {
-                return requestVaultManifest(candidates, index + 1);
-            }
-            throw error;
-        });
-}
-
-function init() {
-    setStatusIndicator('unknown');
-    updatePlayerTimestamp();
-
-    fetchPlayerCount();
-    fetchChangelog();
-    fetchVaultManifest();
-
-    if (vaultSearchInput) {
-        vaultSearchInput.addEventListener('input', handleVaultSearch);
-    }
-
-    setInterval(fetchPlayerCount, 30000);
-    setInterval(updatePlayerTimestamp, 15000);
-}
-
-document.addEventListener('DOMContentLoaded', init);
Index: index.html
===================================================================
diff --git a/index.html b/index.html
deleted file mode 100644
--- a/index.html	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
+++ /dev/null	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
@@ -1,172 +0,0 @@
-<!DOCTYPE html>
-<html lang="en">
-<head>
-    <meta charset="UTF-8">
-    <meta name="viewport" content="width=device-width, initial-scale=1.0">
-    <title>Tamir Archives – Obsidian Vault</title>
-    <link rel="preconnect" href="https://fonts.googleapis.com">
-    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
-    <link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@600;700&family=Cormorant+Garamond:wght@400;500;600;700&family=Source+Sans+3:wght@400;500;600;700&display=swap" rel="stylesheet">
-    <link rel="stylesheet" href="style.css">
-    <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/2.1.0/showdown.min.js" integrity="sha512-pdkwtn6lCPnkLIvH5A6O6pI4PjijNsEOlInt1emwc4in+qyTWNrawgKAYEoibMQyFIc8v6IPF1ilREuH/ZShwQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
-</head>
-<body>
-    <a class="skip-link" href="#main-content">Skip to main content</a>
-    <header class="site-header">
-        <div class="site-header__crest" aria-hidden="true">
-            <span class="crest-sigil">⚜️</span>
-        </div>
-        <div class="site-header__title">
-            <h1>Tamir Archives</h1>
-            <p>Curating every chronicle, decree, and sketch from the Obsidian Vault.</p>
-        </div>
-        <div class="site-header__aside">
-            <form class="site-header__search" role="search">
-                <label for="site-search" class="visually-hidden">Search the archives</label>
-                <input id="site-search" type="search" name="search" placeholder="Search the archives" autocomplete="off">
-                <button type="submit">Go</button>
-            </form>
-            <p class="site-header__update">Last catalogue refresh: <span id="vault-refresh">Awaiting manifest</span></p>
-        </div>
-    </header>
-
-    <nav class="primary-nav" aria-label="Primary navigation">
-        <a href="#" class="nav-link active">Vault</a>
-        <a href="#" class="nav-link">Projects</a>
-        <a href="#" class="nav-link">Guides</a>
-        <a href="#" class="nav-link">Community</a>
-        <a href="#" class="nav-link">World Map</a>
-        <a href="#" class="nav-link">Council Tools</a>
-    </nav>
-
-    <div class="content-layout">
-        <aside class="column column--left" aria-label="Scholarly directives">
-            <section class="portal-card">
-                <h3>Scholia Imperialis</h3>
-                <ul>
-                    <li><a href="#">Grand design briefs</a></li>
-                    <li><a href="#">Expedition dossiers</a></li>
-                    <li><a href="#">Arcane research log</a></li>
-                    <li><a href="#">Guildmaster petitions</a></li>
-                    <li><a href="#">Cartographer's drafts</a></li>
-                </ul>
-            </section>
-            <section class="portal-card">
-                <h3>Correspondence</h3>
-                <ul>
-                    <li><a href="#">Council bulletins</a></li>
-                    <li><a href="#">Mercantile letters</a></li>
-                    <li><a href="#">Diplomatic archives</a></li>
-                    <li><a href="#">Festival invitations</a></li>
-                    <li><a href="#">Scribes' ledger</a></li>
-                </ul>
-            </section>
-            <section class="portal-card">
-                <h3>Guild utilities</h3>
-                <ul>
-                    <li><a href="#">Skill harmonics</a></li>
-                    <li><a href="#">Artefact registry</a></li>
-                    <li><a href="#">Bestiary annotations</a></li>
-                    <li><a href="#">Logistics table</a></li>
-                </ul>
-            </section>
-        </aside>
-
-        <main id="main-content" class="column column--main" aria-labelledby="vault-heading">
-            <section class="vault" aria-label="Obsidian vault library">
-                <header class="vault__header">
-                    <div>
-                        <h2 id="vault-heading">Obsidian Vault Library</h2>
-                        <p>Browse field notes, design briefs, and council orders preserved within the vault.</p>
-                    </div>
-                    <div class="vault__controls">
-                        <label class="visually-hidden" for="vault-search">Search the vault</label>
-                        <input id="vault-search" type="search" placeholder="Search manuscripts" autocomplete="off">
-                        <span class="vault__status" id="vault-status">Indexing the shelves…</span>
-                    </div>
-                </header>
-                <div class="vault__body">
-                    <nav class="vault__catalog" aria-label="Vault catalogue">
-                        <div class="vault__catalog-scroll" id="vault-catalog" aria-live="polite"></div>
-                    </nav>
-                    <article class="vault__note" id="vault-note" aria-live="polite">
-                        <p class="vault__placeholder">Select a manuscript from the catalogue to unveil its transcription.</p>
-                    </article>
-                </div>
-                <footer class="vault__breadcrumbs" id="vault-breadcrumbs" aria-live="polite"></footer>
-            </section>
-
-            <article class="article chronicle">
-                <header class="article__header">
-                    <h2 id="article-heading">Development Chronicle</h2>
-                    <p class="article__meta">Latest entry: <span id="changelog-updated">Gathering records...</span></p>
-                </header>
-                <div id="changelog-content" class="article__body">
-                    <p>Gathering entries from the Grand Library...</p>
-                </div>
-            </article>
-
-            <section class="feature-grid" aria-label="Featured resources">
-                <h3>Curated briefings</h3>
-                <div class="feature-grid__cards">
-                    <article class="feature-card">
-                        <h4>Master artisanship</h4>
-                        <p>Treatises on crafting, resource routes, and refined production ledgers.</p>
-                        <a href="#" class="feature-card__link">Review the workshop schematics</a>
-                    </article>
-                    <article class="feature-card">
-                        <h4>Strategic campaigns</h4>
-                        <p>Battlefield diagrams, gauntlet stratagems, and hero rosters.</p>
-                        <a href="#" class="feature-card__link">Consult the war council records</a>
-                    </article>
-                    <article class="feature-card">
-                        <h4>Economic intelligence</h4>
-                        <p>Trade winds, market valuations, and caravansary inventories.</p>
-                        <a href="#" class="feature-card__link">Inspect the trade manifest</a>
-                    </article>
-                </div>
-            </section>
-        </main>
-
-        <aside class="column column--right" aria-label="World details">
-            <section class="infobox">
-                <div class="infobox__title">Realm status</div>
-                <div class="infobox__content">
-                    <div class="player-status">
-                        <span id="player-status-indicator" class="status-indicator status-unknown" aria-hidden="true"></span>
-                        <span id="player-status-text">Checking realm...</span>
-                    </div>
-                    <p class="player-count">Players in session: <span id="player-count">--</span></p>
-                    <p class="player-updated">Last checked: <span id="player-updated">Awaiting update</span></p>
-                </div>
-            </section>
-
-            <section class="infobox">
-                <div class="infobox__title">Active commissions</div>
-                <div class="infobox__content">
-                    <ul class="infobox__list">
-                        <li><strong>Woodcutting Requital:</strong> Finalize grove tiers and draughts.</li>
-                        <li><strong>Gauntlet Theses:</strong> Refine Hunllef rituals and diagrams.</li>
-                        <li><strong>Guild Ledger:</strong> Expand leadership tracking utilities.</li>
-                        <li><strong>Continental Charts:</strong> Mark key events and convergences.</li>
-                    </ul>
-                </div>
-            </section>
-
-            <section class="infobox">
-                <div class="infobox__title">From the scriptorium</div>
-                <div class="infobox__content">
-                    <p>The Spirit of the Grove now guarantees tribute when summoned—optimal for rare stockpiles.</p>
-                </div>
-            </section>
-        </aside>
-    </div>
-
-    <footer class="site-footer">
-        <p>Maintained by the Tamir Council of Scribes. Honouring the craft of the Obsidian Vault.</p>
-    </footer>
-
-    <div class="cursor-light" aria-hidden="true"></div>
-    <script src="script.js"></script>
-</body>
-</html>
Index: TamirWiki/.obsidian/app.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/.obsidian/app.json b/TamirWiki/.obsidian/app.json
new file mode 100644
--- /dev/null	(date 1758181475550)
+++ b/TamirWiki/.obsidian/app.json	(date 1758181475550)
@@ -0,0 +1,3 @@
+{
+  "alwaysUpdateLinks": true
+}
\ No newline at end of file
Index: TamirWiki/.obsidian/appearance.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/.obsidian/appearance.json b/TamirWiki/.obsidian/appearance.json
new file mode 100644
--- /dev/null	(date 1758181475551)
+++ b/TamirWiki/.obsidian/appearance.json	(date 1758181475551)
@@ -0,0 +1,1 @@
+{}
\ No newline at end of file
Index: TamirWiki/.obsidian/workspace.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/.obsidian/workspace.json b/TamirWiki/.obsidian/workspace.json
new file mode 100644
--- /dev/null	(date 1758509837723)
+++ b/TamirWiki/.obsidian/workspace.json	(date 1758509837723)
@@ -0,0 +1,247 @@
+{
+  "main": {
+    "id": "cda3eddf51b9ff6b",
+    "type": "split",
+    "children": [
+      {
+        "id": "3ddfaa8af55d832f",
+        "type": "tabs",
+        "children": [
+          {
+            "id": "f05beb0a3b2c6bad",
+            "type": "leaf",
+            "state": {
+              "type": "markdown",
+              "state": {
+                "file": "00 - Home & Dashboard/Home.md",
+                "mode": "source",
+                "source": false
+              },
+              "icon": "lucide-file",
+              "title": "Home"
+            }
+          },
+          {
+            "id": "d06b3325137e60d4",
+            "type": "leaf",
+            "state": {
+              "type": "markdown",
+              "state": {
+                "file": "02 - Game Design/Map Design Document.md",
+                "mode": "source",
+                "source": false
+              },
+              "icon": "lucide-file",
+              "title": "Map Design Document"
+            }
+          }
+        ],
+        "currentTab": 1
+      },
+      {
+        "id": "f884a7f59bc81c2e",
+        "type": "tabs",
+        "children": [
+          {
+            "id": "85d2ffb0d703c4ed",
+            "type": "leaf",
+            "state": {
+              "type": "markdown",
+              "state": {
+                "file": "02 - Game Design/B - Quest System.md",
+                "mode": "source",
+                "source": false
+              },
+              "icon": "lucide-file",
+              "title": "B - Quest System"
+            }
+          }
+        ]
+      }
+    ],
+    "direction": "vertical"
+  },
+  "left": {
+    "id": "9a58569436b453cd",
+    "type": "split",
+    "children": [
+      {
+        "id": "47db36f0f9ddfbda",
+        "type": "tabs",
+        "children": [
+          {
+            "id": "b7f0724cfe6df66b",
+            "type": "leaf",
+            "state": {
+              "type": "file-explorer",
+              "state": {
+                "sortOrder": "alphabetical",
+                "autoReveal": false
+              },
+              "icon": "lucide-folder-closed",
+              "title": "Files"
+            }
+          },
+          {
+            "id": "ec2c8fe78d2b5a0d",
+            "type": "leaf",
+            "state": {
+              "type": "search",
+              "state": {
+                "query": "tag:content/item",
+                "matchingCase": false,
+                "explainSearch": false,
+                "collapseAll": false,
+                "extraContext": false,
+                "sortOrder": "alphabetical"
+              },
+              "icon": "lucide-search",
+              "title": "Search"
+            }
+          },
+          {
+            "id": "a3a3cbf0740b226c",
+            "type": "leaf",
+            "state": {
+              "type": "bookmarks",
+              "state": {},
+              "icon": "lucide-bookmark",
+              "title": "Bookmarks"
+            }
+          }
+        ]
+      }
+    ],
+    "direction": "horizontal",
+    "width": 300
+  },
+  "right": {
+    "id": "fe544cfc85395a8a",
+    "type": "split",
+    "children": [
+      {
+        "id": "17428e80b5974721",
+        "type": "tabs",
+        "children": [
+          {
+            "id": "ae044dda9291b318",
+            "type": "leaf",
+            "state": {
+              "type": "backlink",
+              "state": {
+                "file": "02 - Game Design/Map Design Document.md",
+                "collapseAll": false,
+                "extraContext": false,
+                "sortOrder": "alphabetical",
+                "showSearch": false,
+                "searchQuery": "",
+                "backlinkCollapsed": false,
+                "unlinkedCollapsed": true
+              },
+              "icon": "links-coming-in",
+              "title": "Backlinks for Map Design Document"
+            }
+          },
+          {
+            "id": "7be42e9719d56b16",
+            "type": "leaf",
+            "state": {
+              "type": "outgoing-link",
+              "state": {
+                "file": "02 - Game Design/Map Design Document.md",
+                "linksCollapsed": false,
+                "unlinkedCollapsed": true
+              },
+              "icon": "links-going-out",
+              "title": "Outgoing links from Map Design Document"
+            }
+          },
+          {
+            "id": "eabd2520792be596",
+            "type": "leaf",
+            "state": {
+              "type": "tag",
+              "state": {
+                "sortOrder": "frequency",
+                "useHierarchy": true,
+                "showSearch": false,
+                "searchQuery": ""
+              },
+              "icon": "lucide-tags",
+              "title": "Tags"
+            }
+          },
+          {
+            "id": "4680839d31aa3656",
+            "type": "leaf",
+            "state": {
+              "type": "outline",
+              "state": {
+                "file": "02 - Game Design/Map Design Document.md",
+                "followCursor": false,
+                "showSearch": false,
+                "searchQuery": ""
+              },
+              "icon": "lucide-list",
+              "title": "Outline of Map Design Document"
+            }
+          }
+        ]
+      }
+    ],
+    "direction": "horizontal",
+    "width": 300,
+    "collapsed": true
+  },
+  "left-ribbon": {
+    "hiddenItems": {
+      "switcher:Open quick switcher": false,
+      "graph:Open graph view": false,
+      "canvas:Create new canvas": false,
+      "daily-notes:Open today's daily note": false,
+      "templates:Insert template": false,
+      "command-palette:Open command palette": false,
+      "bases:Create new base": false
+    }
+  },
+  "active": "d06b3325137e60d4",
+  "lastOpenFiles": [
+    "02 - Game Design/B - Quest System.md",
+    "02 - Game Design/Map Design Document.md",
+    "02 - Game Design/Game Design Document (GDD).md",
+    "04 - Content Implementation/Skills/Slayer.md",
+    "04 - Content Implementation/Skills/Skills Blogs/B - Slayer.md",
+    "hmm.md",
+    "04 - Content Implementation/Skills/Skills Blogs/B - Woodcutting.md",
+    "04 - Content Implementation/Skills/Skills Blogs/B - Fletching.md",
+    "01 - Project Management/(0.0.5) yyyy-mm-dd - World and Sigils.md",
+    "04 - Content Implementation/B - Sigil System.md",
+    "01 - Project Management/Changelog.md",
+    "00 - Home & Dashboard/Home.md",
+    "01 - Project Management/previous versions/(0.0.4) - 2025-09-16 - Woodcutting Rework pt2.md",
+    "01 - Project Management/Project Roadmap.md",
+    "01 - Project Management/Development Journal.md",
+    "04 - Content Implementation/Skills/Firemaking.md",
+    "04 - Content Implementation/Maps & Regions/Tamir Central.md",
+    "04 - Content Implementation/Maps & Regions/Tamir Exchange.md",
+    "04 - Content Implementation/Skills/Skills Blogs/B - Smithing.md",
+    "04 - Content Implementation/Skills/Smithing.md",
+    "04 - Content Implementation/Skills/Skills Blogs/B - Enchanting.md",
+    "04 - Content Implementation/B - Achievement Rework.md",
+    "04 - Content Implementation/Interfaces/World Tab ('quest tab').md",
+    "01 - Project Management/Version 1.0.md",
+    "04 - Content Implementation/Interfaces",
+    "04 - Content Implementation/Skills/Fletching.md",
+    "Blue Moon Inn.md",
+    "Pasted image 20250918151953.png",
+    "07 - Attachments/media",
+    "03 - World of Tamir (Lore)/(ideas)",
+    "01 - Project Management/previous versions",
+    "04 - Content Implementation/Skills/Skills Blogs",
+    "Untitled.base",
+    "05 - Technical Notes/Networking",
+    "04 - Content Implementation/Maps & Regions",
+    "04 - Content Implementation/Skills",
+    "04 - Content Implementation/Quests"
+  ]
+}
\ No newline at end of file
Index: TamirWiki/.obsidian/templates.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/.obsidian/templates.json b/TamirWiki/.obsidian/templates.json
new file mode 100644
--- /dev/null	(date 1758129950111)
+++ b/TamirWiki/.obsidian/templates.json	(date 1758129950111)
@@ -0,0 +1,3 @@
+{
+  "folder": "06 - Templates"
+}
\ No newline at end of file
Index: TamirWiki/.obsidian/graph.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/.obsidian/graph.json b/TamirWiki/.obsidian/graph.json
new file mode 100644
--- /dev/null	(date 1758173259563)
+++ b/TamirWiki/.obsidian/graph.json	(date 1758173259563)
@@ -0,0 +1,22 @@
+{
+  "collapse-filter": true,
+  "search": "",
+  "showTags": false,
+  "showAttachments": false,
+  "hideUnresolved": false,
+  "showOrphans": true,
+  "collapse-color-groups": true,
+  "colorGroups": [],
+  "collapse-display": true,
+  "showArrow": false,
+  "textFadeMultiplier": 0,
+  "nodeSizeMultiplier": 1,
+  "lineSizeMultiplier": 1,
+  "collapse-forces": true,
+  "centerStrength": 0.518713248970312,
+  "repelStrength": 10,
+  "linkStrength": 1,
+  "linkDistance": 250,
+  "scale": 0.184623262258581,
+  "close": true
+}
\ No newline at end of file
Index: TamirWiki/01 - Project Management/Changelog.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Change Log  \r\n*Tamir, looking back.*  \r\n  \r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n\r\n---\r\n\r\n## [[(0.0.3) - 2025-09-11 - Woodcutting Rework pt 1]] \r\nThere has been much time, and many changes in between. MANY of the updates are undocumented. Again, I need to   \r\nstress that this entire process has been a massive learning experience for me. Hopefully going forward, using this document, I will be able to track my updates much better and more clearly.  \r\n  \r\nWith that being said, this update is mainly focused on The Woodcutting Rework!   \r\n  \r\n### Added  \r\n* added new region \"The grove\" (Contains every type of tree choppable in Tamir).  \r\n* added new npc \"Ed Wood\". (He transports the player to and from the grove)  \r\n* new npc \"Friendly Forester\". Contains 2 new shops.  \r\n  * added generic woodcutting axe shop, contains bronze-rune.  \r\n* added grove token shop, and grove token currency  \r\n  * contains Lumberjack outfit pieces  \r\n  * Felling Axe Handle  \r\n* Added Spirit of the Grove events  \r\n  * occasionally occur while woodcutting, give loot and 'blessing of the grove'  \r\n* Added 'Blessing of the Grove' Woodcutting buff which gives increased damage, crtical hits, auto banks logs, gives extra grove tokens, improves chop speed and improves progress towards your next log.  \r\n* Added achievement section for Woodcutting achievements.  \r\n* added `::wcbonuses` command to display wc bonuses  \r\n### Changed  \r\n* rebalanced old and added \"new\" trees  \r\n  * added redwoods/celastrus/and crystal as 'regular' choppable trees  \r\n* rebalanced old and added \"new\" axes, including felling axes and the ability to create them.  \r\n* changed woodcutting to be more like \"do damage to a tree based on your level\", allowing for 'critical swings', slowing down log rates but keeping xp rates.  \r\n* heavily buffed wc outfit effects  \r\n* made bird's nests stackable and go straight to inventory  \r\n* changed clue scrolls to be caskets for rewards isntead of clues directly  \r\n* removed trees getting chopped down (temporary)  \r\n* random events no longer teleport you for ignoring them  \r\n\r\n---\r\n\r\n## [[(0.0.2) - 2025-07-30]]  \r\nUpdate 2: Galvek, Gauntlet, various other updates  \r\n### Added  \r\n* started work on gauntlet  \r\n  * no prep, only boss fight  \r\n  * standard attacks mage/range, changes every 4  \r\n  * changes prayer every 6th hit taken  \r\n  * floor tile special: the floors flash a warning color before changing to damaging tiles  \r\n  * tornadoes special: the hunllef periodically summons tornadoes that chase the player around the room.  \r\n  * the lower health, the more tornadoes  \r\n  * collection log (bowfa, blade of saeldor, crystal armor, pet tbd)  \r\n  * teleport  \r\n* added Galvek boss fight;  \r\n  *  Standard attacks with mage/range/melee - 100%  \r\n  *  dragonfire attack + pink dragonfire attack -100%  \r\n  *  fire trap attack - 90% (need to set proper locations)  \r\n  *  Gust of wind attack - 100%  \r\n  *  tsunami attack - 100%  \r\n  *  Earth stun attack - 100%  \r\n  *  phase transitions - 90% (need to fix anims)  \r\n  *  -dded teleport to interface, as well as collection log (drops dragon hunter crossbow, which will not be rewarded from Chambers)  \r\n### Changed  \r\n* started reworking smithing requirements  \r\n  * all items are unlocked when that tier is unlocked (for example, mith bars are at level 30 so mith platelegs are also level 30)  \r\n* added more to skillzone  \r\n  * flax field and spinning wheel, altar, and a useless lectern  \r\n* fixed super antifires  \r\n* added widget to display antifire cooldown (functionality was already there, just wasn't used)  \r\n\r\n---\r\n\r\n## [[(0.0.1) - 2025-07-23]]  \r\nThis update is my first time working with a 317, after about a few months of playing with 718s and learning the absolute basics.  \r\nNow,  \r\n### Added  \r\n* added coal fragments:  \r\n  -   use hammer on piece of coal to recieve 10 coal fragments.  \r\n  *   coal fragments are used in place of coal when smelting.  \r\n*   added custom mining objects and items  \r\n*   objects(11378 > light anima rock, 2449 > dark anima rock, 28596 > dragonite rock)  \r\n*  added 'Seren Mining' prestige perk, 50% chance to bank ores  \r\n*   added ::skillz fully custom skill zone (will eventually become the new home)  \r\n*   added a slightly broken xp tracker plugin  \r\n*   changed starter bank to be much more humble  \r\n*   added thieving on an afk timer  \r\n### Changed  \r\n* changed starter bank to be much more humble  \r\n* edited edgeville and surrounding regions  \r\n* updated mining skill guide  \r\n*   updated pickaxe speeds and tiers  \r\n*   changed base xp rates to 10x  \r\n\r\n\r\n\r\n\r\n\r\n\r\n---\r\n[unreleased] - yyyy-mm-dd  \r\nHere we would have the update steps for 1.2.4 for people to follow.  \r\n### Added  \r\n### Changed  \r\n### Fixed
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/01 - Project Management/Changelog.md b/TamirWiki/01 - Project Management/Changelog.md
--- a/TamirWiki/01 - Project Management/Changelog.md	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
+++ b/TamirWiki/01 - Project Management/Changelog.md	(date 1758357332151)
@@ -1,12 +1,44 @@
 # Change Log  
 *Tamir, looking back.*  
-  
+
 
+---
+## (0.0.4) - 2025-09-16 - Woodcutting Rework pt1.2
+A continuation of work on the [[Woodcutting Rework Part 1]] project.  
+### Added  
+- Aggie spawn to her home
+- Copied Emir's Arena from OSRS into Tamir as a new extension of land on the east side of the world.
+* added axeman’s folly and axeman’s folly m to Forester’s Grove Token Exchange (cost of 25/250) 
+* added new potion types to PotionData:  
+  * WEAK_SKILL(3, 0),  
+  * NORMAL_SKILL(5, .10F),  
+  * SUPER_SKILL(7, .20F),  
+  * EXTREME_SKILL(10, .20F)  
+* added axeman folly and matured variant to `PotionData` using `normal_skill` and `extreme_skill` boosts, and a guaranteed Spirit of the Grove spawn.  
+* added Extreme Woodcutting potion to PotionData. TODO client sided changes and server sided-data changes for the items (currently uses null IDs).  
+* added extreme wc potions to ItemDefinitions client sided.  
+* added `::grovetier (number)` command to change grovetier.  **temporary**
+* added `GroveForesterDialogue`, including options to upgrade the tier of the grove and to open the grove token exchange.  
+* to upgrade the grove tier, you must have completed x% of achievements (25/50/80/99%) and spend a certain amount of grove tokens.  
+* added woodcutting capes and hood (costs 1m gp) to grove equipment shop.  
+* added mahogany trees and logs
+* added WoodcuttingActivityPanel.
+	* tracks all players wc stats
+	* includes tree health/ icons for hatchet used/tree being chopped, and progress bar till next log
   
-  
-  
-  
-  
+### Changed  
+* removed wilderness requirements from looting bag  
+  * changed spirit of the grove loot to be a guaranteed item.  
+* updated woodcutting skill guide  
+* changed woodcutting tutor to be the main shop npc, and the forester to be the grove token npc.  
+* updated the grove map, looks nicer now. more makeup to come in the future  
+* big rewrite of Woodcutting Bonuses System.  
+* gave all trees MUCH more health, making logs a lot slower to obtain.  
+* SIGNIFICANTLY boosted the critical hit chance with felling axes.from 1-5% up to 55-75%  
+### Fixed  
+* updated PlayerAssistant skillRestore() method to include all skills instead of just combat skills.  
+* added grovetier to player persist file and db scripts.  
+* fixed a bug where when your inventory was empty you would stop chopping, but left it where if you drop an item you’ll continue chopping.   
 
 ---
 
Index: TamirWiki/.obsidian/core-plugins.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/.obsidian/core-plugins.json b/TamirWiki/.obsidian/core-plugins.json
new file mode 100644
--- /dev/null	(date 1758129483162)
+++ b/TamirWiki/.obsidian/core-plugins.json	(date 1758129483162)
@@ -0,0 +1,33 @@
+{
+  "file-explorer": true,
+  "global-search": true,
+  "switcher": true,
+  "graph": true,
+  "backlink": true,
+  "canvas": true,
+  "outgoing-link": true,
+  "tag-pane": true,
+  "footnotes": false,
+  "properties": false,
+  "page-preview": true,
+  "daily-notes": true,
+  "templates": true,
+  "note-composer": true,
+  "command-palette": true,
+  "slash-command": false,
+  "editor-status": true,
+  "bookmarks": true,
+  "markdown-importer": false,
+  "zk-prefixer": false,
+  "random-note": false,
+  "outline": true,
+  "word-count": true,
+  "slides": false,
+  "audio-recorder": false,
+  "workspaces": false,
+  "file-recovery": true,
+  "publish": false,
+  "sync": true,
+  "bases": true,
+  "webviewer": false
+}
\ No newline at end of file
Index: TamirWiki/00 - Home & Dashboard/Home.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># ⚔\uFE0F The Tamir Project Hub\r\n*Last updated: 2025-09-17*\r\n\r\n---\r\n\r\n### ✅ **Current Development Sprint [[(0.0.4) - 2025-09-16 - Woodcutting Rework pt2|0.0.4]]\r\n\r\n\r\n- [x] Model and animate the [[Grave Lord]]'s basic attack.\r\n- [ ] Implement the [[Grave Lord]]'s \"Summon Skeleton\" special move.\r\n- [ ] Design the drop table for the [[Grave Lord]].\r\n- [ ] Write the lore entry for the [[Grave Lord]]'s Lair map.\r\n- [ ] Fix bug where [[Prayer]] skill drain is too fast.\r\n\r\n---\r\n\r\n### \uD83D\uDDFA\uFE0F Core Project Navigation\r\n\r\n| Category | Key Documents | Description |\r\n|---|---|---|\r\n| **Project Management** | [[Project Roadmap]]<br>[[Changelog]]<br>[[Development Journal]] | High-level goals, version history, and daily thoughts. |\r\n| **Game Design** | [[Game Design Document (GDD)]]<br>[[Combat System]]<br>[[Skilling Philosophy]] | The core vision and rules that define Tamir. |\r\n| **World & Lore** | [[History of Tamir]]<br>[[Map of the World]]<br>[[Major Factions]] | The story, people, and places of the world. |\r\n| **Content** | [[Master Item List]]<br>[[Master Quest List]]<br>[[Master NPC List]] | The in-game \"database\" of everything tangible. |\r\n| **Technical** | [[Server Setup Guide]]<br>[[Code Snippets]]<br>[[Asset Pipeline]] | The nuts and bolts of the code and assets. |\r\n\r\n---\r\n\r\n### \uD83D\uDCA1 Recent Ideas (Brain Dump)\r\n*A place for quick thoughts before they get sorted.*\r\n- Idea: RegionID 12597, steal the Cooking Guild and Juliet's Mansion for Tamir.\r\n- Idea: What if the [[Smithing]] skill allowed for creating custom item trims?\r\n- Idea: New agility shortcut over the [[River Lum]].
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/00 - Home & Dashboard/Home.md b/TamirWiki/00 - Home & Dashboard/Home.md
--- a/TamirWiki/00 - Home & Dashboard/Home.md	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
+++ b/TamirWiki/00 - Home & Dashboard/Home.md	(date 1758357360654)
@@ -3,14 +3,22 @@
 
 ---
 
-### ✅ **Current Development Sprint [[(0.0.4) - 2025-09-16 - Woodcutting Rework pt2|0.0.4]]
+### ✅ **Current Development Sprint [[(0.0.5) yyyy-mm-dd - World and Sigils]]
 
+*update history*
+[[(0.0.4) - 2025-09-16 - Woodcutting Rework pt2]]
+[[(0.0.3) - 2025-09-11 - Woodcutting Rework pt 1]]
+[[(0.0.2) - 2025-07-30]]
+[[(0.0.1) - 2025-07-23]]
 
-- [x] Model and animate the [[Grave Lord]]'s basic attack.
-- [ ] Implement the [[Grave Lord]]'s "Summon Skeleton" special move.
-- [ ] Design the drop table for the [[Grave Lord]].
-- [ ] Write the lore entry for the [[Grave Lord]]'s Lair map.
-- [ ] Fix bug where [[Prayer]] skill drain is too fast.
+*known issues*
+- [ ] achievements past level 40 aren't showing
+- [ ] level achievements are being triggered by 
+- [ ] problem with spirit of the grove repeatedly spawning
+- [ ] issue with forester dialogue about life
+- [ ] 'tree health' is being tracked globally rather than per player, so when 20 people are chopping a tree someone is gonna get lucky. this will get fixed in the final push for woodcutting rework project. 
+- [ ] activity panel not having a real start
+- [ ] achievements only showing up to level 10
 
 ---
 
Index: TamirWiki/04 - Content Implementation/Skills/Skills Blogs/B - Slayer.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/04 - Content Implementation/Skills/Skills Blogs/B - Slayer.md b/TamirWiki/04 - Content Implementation/Skills/Skills Blogs/B - Slayer.md
new file mode 100644
--- /dev/null	(date 1758478795072)
+++ b/TamirWiki/04 - Content Implementation/Skills/Skills Blogs/B - Slayer.md	(date 1758478795072)
@@ -0,0 +1,10 @@
+Slayer is very different from how you know it in osrs and rs3. 
+Every 'slayer monster' (which is nearly every monster in the game), will give exp on every kill, regardless of if you are on task or not.
+
+**Slayer Guild**
+The Slayer Masters of Tamir all live in the Slayer's Guild, an area north-east of [Tamir Central].
+
+Getting a slayer task from the Guild will increase experience gained from that monster, as well as give slayer points as a reward upon completion.
+
+Slayer points can 
+
Index: TamirWiki/01 - Project Management/(0.0.5) yyyy-mm-dd - World and Sigils.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/01 - Project Management/(0.0.5) yyyy-mm-dd - World and Sigils.md b/TamirWiki/01 - Project Management/(0.0.5) yyyy-mm-dd - World and Sigils.md
new file mode 100644
--- /dev/null	(date 1758388326777)
+++ b/TamirWiki/01 - Project Management/(0.0.5) yyyy-mm-dd - World and Sigils.md	(date 1758388326777)
@@ -0,0 +1,17 @@
+This update is going to be focused on updating the map and introducing the [[B - Sigil System|sigil system]].
+### Added  
+- dialog when 'inspecting' a sigil that shows its effect
+- shows active sigil in quest tab and ::mysigil command
+- added ::sigil (sigil name) developer command
+- add the following combat
+- add sigil definitions, categories, and a player sigil manager to handle attuning limits, effects.
+- register a sigil attunement click plugin and persist attuned sigils and limits on the player
+- expand attack speed modifiers with minus-one support, update combat strategies
+- Reworked home area to have the bank a little bigger
+### Changed  
+### Fixed
+
+*bugs*
+-quest tab text doesnt fit, looks horrendous
+-players can repeatedly turn on and off a sigil to remove attack delay
+-attune/detune graphic plays too low, needs to be higher, also slower if possible.
Index: TamirWiki/02 - Game Design/Map Design Document.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n# Desert\r\n### overlays\r\n- path overlays - 75/226\r\n- unwalkable overlays - 76/59\r\n- water - 195\r\n#### underlays\r\n- sand - 61\r\n- under dark spots - 67\r\n- \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/02 - Game Design/Map Design Document.md b/TamirWiki/02 - Game Design/Map Design Document.md
--- a/TamirWiki/02 - Game Design/Map Design Document.md	(revision 7cd08ac37527d9c2593adfaf05a37e231b9e3f19)
+++ b/TamirWiki/02 - Game Design/Map Design Document.md	(date 1758509860582)
@@ -1,10 +1,22 @@
+This document is going to be my brain-dump, including ideas, notes, and everything related to map design and creation.
+
+The starter city is *not* going to be [Tamir Central], players will start in a seperate city known as [[Starter Town]]. *name to be changed obviously*. 
+
+The theme for starter town is going to be dark, scary, maybe like a morytania or draynor manor type vibe.  Tamir Central should have a more 'priffy' kind of vibe. 
+
+
+
+
+
 
-# Desert
-### overlays
+
+### Desert
+#### overlays
 - path overlays - 75/226
 - unwalkable overlays - 76/59
 - water - 195
 #### underlays
 - sand - 61
 - under dark spots - 67
-- 
+### Shayzien
+region ids for course:6200, 5944,
\ No newline at end of file
Index: TamirWiki/02 - Game Design/B - Quest System.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/02 - Game Design/B - Quest System.md b/TamirWiki/02 - Game Design/B - Quest System.md
new file mode 100644
--- /dev/null	(date 1758488826685)
+++ b/TamirWiki/02 - Game Design/B - Quest System.md	(date 1758488826685)
@@ -0,0 +1,8 @@
+Need to design a system for creating quests.
+
+Every single quest will need the following info;
+	name;
+	progess; (started, unstarted, finished)
+	# of steps;
+	storyline;
+	
\ No newline at end of file
Index: TamirWiki/04 - Content Implementation/Maps & Regions/Tamir Exchange.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/04 - Content Implementation/Maps & Regions/Tamir Exchange.md b/TamirWiki/04 - Content Implementation/Maps & Regions/Tamir Exchange.md
new file mode 100644
--- /dev/null	(date 1758317127378)
+++ b/TamirWiki/04 - Content Implementation/Maps & Regions/Tamir Exchange.md	(date 1758317127378)
@@ -0,0 +1,1 @@
+Located in [[Tamir Central]], the main hub for player trading and bank access. 
\ No newline at end of file
Index: TamirWiki/04 - Content Implementation/B - Sigil System.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TamirWiki/04 - Content Implementation/B - Sigil System.md b/TamirWiki/04 - Content Implementation/B - Sigil System.md
new file mode 100644
--- /dev/null	(date 1758362031243)
+++ b/TamirWiki/04 - Content Implementation/B - Sigil System.md	(date 1758362031243)
@@ -0,0 +1,196 @@
+---
+tags:
+  - blog
+  - content
+  - design
+status: idea
+---
+---
+# Overview
+
+The sigil system is Tamir's answer to "Perks". 
+As a fresh account, players will only be allowed one active Sigil at a time, but this can be increased. Simply clicking on a sigil will 'attune' it to the player, giving them that sigil's effect. The effect will work from a player's bank, as long as the sigil is attuned. 
+
+---
+
+# Sigils & Effects
+
+#### Combat Sigils
+
+| Sigil Name         | Effect                                    |
+| ------------------ | ----------------------------------------- |
+| Meticulous Mage    | Attack 1 tick faster with Magic attacks.  |
+| Formidable Fighter | Attack 1 tick faster with Melee attacks.  |
+| Rigourous Ranger   | Attack 1 tick faster with Ranged attacks. |
+| Menacing Mage      | Attack twice as fast with Magic attacks.  |
+| Feral Fighter      | Attack twice as fast with Melee attacks.  |
+| Ruthless Ranger    | Attack twice as fast with Ranged attacks. |
+|                    |                                           |
+|                    |                                           |
+
+#### Skilling Sigils
+
+| Sigil Name       | Effect                                                                                                                               |
+| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
+| Sigil of Storage | You have a 50% chance to send your newly gathered resources to the Bank when gathering with Mining, Fishing, Woodcutting or Farming. |
+
+
+# Roadmap
+0.1:
+-Define sigils, enable activation/deactivation.
+	this includes swapping the items, and playing the anim and spot anim (graphic).
+0.2:
+-Define sigil effects, create a way to track which effects the player currently has active
+0.3:
+-Create initial combat sigil effects and test them
+
+---
+
+We need to apply some changes. When defining sigils, every sigil needs to have a name, category, unattuned item Id, attuned item Id, effect. 
+
+We need to make sure we have the clicking interaction down, it should work like this:
+Interaction with an *unattuned sigil*
+```
+FirstClick:
+	if (player.alreadyHasAttunemement){
+		end
+	} else{
+		play graphic and animation
+		apply effect to player
+		SWAP unattuned item for attuned item
+		sendMessage("You are now attuned to the *name of the sigil*")
+	}
+SecondClick:
+	senddialogbox("sigil effect here")
+	
+``` 
+interaction with *attuned* sigil:
+```
+FirstClick:
+	sendDialogBox("sigil effect here")
+ThirdClick:
+	play graphic and animation
+	clear effect from player
+	SWAP items back
+	sendMessage("")
+	
+```
+
+Next, we need a way for the player to check their currently active sigil if they're on the go. Let's add a line displaying current active sigil to the quest tab.
+Finally, we should remove the old player and dev commands ::halfatk and ::normalatk, and replace them player command ::mysigil (which displays which sigil is currently active) and dev command ::sigil (name of any sigil) and it will activate that sigil.
+
+
+
+
+
+
+
+
+---
+ANIM IDs:
+```
+public static final int USE_SIGIL = 712;
+```
+GFX IDs:
+```
+public static final int SIGIL_ATTUNE_COMBAT = 1970;  
+public static final int SIGIL_ATTUNE_UTILITY = 1971;  
+public static final int SIGIL_ATTUNE_SKILLING = 1972;  
+public static final int SIGIL_UNATTUNE = 1973;  
+ 
+public static final int SIGIL_OF_FREEDOM = 1975;  
+public static final int SIGIL_OF_BINDING = 1976;    
+public static final int SIGIL_OF_ESCAPING = 1978;  
+public static final int SIGIL_OF_PORCUPINE = 1979;   
+public static final int SIGIL_OF_FINALITY = 1982;  
+public static final int SIGIL_OF_RAMPAGE = 1983;  
+public static final int SIGIL_OF_RAMPAGE_BUFF_01 = 1984;  
+public static final int SIGIL_OF_RAMPAGE_BUFF_02 = 1985;  
+public static final int SIGIL_OF_RAMPAGE_BUFF_03 = 1986;  
+public static final int SIGIL_OF_RAMPAGE_BUFF_04 = 1987;  
+public static final int SIGIL_OF_RAMPAGE_BUFF_05 = 1988;  
+public static final int SIGIL_OF_SUPREME_STAMINA = 1989;  
+public static final int SIGIL_OF_THE_LAST_RECALL_DISAPPEAR = 1990;  
+public static final int SIGIL_OF_THE_LAST_RECALL_REAPPEAR = 1991;  
+public static final int SIGIL_OF_THE_GUARDIAN_ANGEL = 1992;  
+public static final int SIGIL_OF_SPECIALISED_STRIKES = 1993;
+```
+
+List of sigils, their active and inactive item IDs.
+```
+public static final int SIGIL_OF_RESILIENCE_UNATTUNED = 25992;  
+public static final int SIGIL_OF_CONSISTENCY_UNATTUNED = 25995;  
+public static final int SIGIL_OF_THE_FORMIDABLE_FIGHTER_UNATTUNED = 25998;  
+public static final int SIGIL_OF_THE_RIGOROUS_RANGER_UNATTUNED = 26001;  
+public static final int SIGIL_OF_THE_METICULOUS_MAGE_UNATTUNED = 26004;  
+public static final int SIGIL_OF_FORTIFICATION_UNATTUNED = 26007;  
+public static final int SIGIL_OF_BARROWS_UNATTUNED = 26010;  
+public static final int SIGIL_OF_DEFT_STRIKES_UNATTUNED = 26013;  
+public static final int SIGIL_OF_FREEDOM_UNATTUNED = 26016;  
+public static final int SIGIL_OF_ENHANCED_HARVEST_UNATTUNED = 26019;  
+public static final int SIGIL_OF_STORAGE_UNATTUNED = 26022;  
+public static final int SIGIL_OF_THE_SMITH_UNATTUNED = 26025;  
+public static final int SIGIL_OF_THE_ALCHEMIST_UNATTUNED = 26028;  
+public static final int SIGIL_OF_THE_FLETCHER_UNATTUNED = 26031;  
+public static final int SIGIL_OF_THE_CHEF_UNATTUNED = 26034;  
+public static final int SIGIL_OF_THE_CRAFTER_UNATTUNED = 26037;  
+public static final int SIGIL_OF_THE_ABYSS_UNATTUNED = 26040;  
+public static final int SIGIL_OF_STAMINA_UNATTUNED = 26043;  
+public static final int SIGIL_OF_THE_POTION_MASTER_UNATTUNED = 26046;  
+public static final int SIGIL_OF_THE_ETERNAL_JEWELLER_UNATTUNED = 26049;  
+public static final int SIGIL_OF_THE_TREASURE_HUNTER_UNATTUNED = 26052;  
+public static final int SIGIL_OF_MOBILITY_UNATTUNED = 26055;  
+public static final int SIGIL_OF_EXAGGERATION_UNATTUNED = 26058;  
+public static final int SIGIL_OF_SPECIALISED_STRIKES_UNATTUNED = 26061;  
+public static final int SIGIL_OF_THE_PORCUPINE_UNATTUNED = 26064;  
+public static final int SIGIL_OF_BINDING_UNATTUNED = 26067;  
+public static final int SIGIL_OF_ESCAPING_UNATTUNED = 26070;  
+public static final int SIGIL_OF_THE_RUTHLESS_RANGER_UNATTUNED = 26073;  
+public static final int SIGIL_OF_THE_FERAL_FIGHTER_UNATTUNED = 26076;  
+public static final int SIGIL_OF_THE_MENACING_MAGE_UNATTUNED = 26079;  
+public static final int SIGIL_OF_PROSPERITY_UNATTUNED = 26082;  
+public static final int SIGIL_OF_THE_DWARVES_UNATTUNED = 26085;  
+public static final int SIGIL_OF_THE_ELVES_UNATTUNED = 26088;  
+public static final int SIGIL_OF_THE_BARBARIANS_UNATTUNED = 26091;  
+public static final int SIGIL_OF_THE_GNOMES_UNATTUNED = 26094;  
+public static final int SIGIL_OF_NATURE_UNATTUNED = 26097;  
+public static final int SIGIL_OF_DEVOTION_UNATTUNED = 26100;  
+public static final int SIGIL_OF_THE_FORAGER_UNATTUNED = 26103;  
+public static final int SIGIL_OF_GARMENTS_UNATTUNED = 26106;  
+public static final int SIGIL_OF_SLAUGHTER_UNATTUNED = 26109;  
+public static final int SIGIL_OF_THE_FORTUNE_FARMER_UNATTUNED = 26112;  
+public static final int SIGIL_OF_VERSATILITY_UNATTUNED = 26115;  
+public static final int SIGIL_OF_THE_SERPENT_UNATTUNED = 26118;  
+public static final int SIGIL_OF_SUPREME_STAMINA_UNATTUNED = 26121;  
+public static final int SIGIL_OF_PRESERVATION_UNATTUNED = 26124;  
+public static final int SIGIL_OF_FINALITY_UNATTUNED = 26127;  
+public static final int SIGIL_OF_PIOUS_PROTECTION_UNATTUNED = 26130;  
+public static final int SIGIL_OF_AGGRESSION_UNATTUNED = 26133;  
+public static final int SIGIL_OF_RAMPAGE_UNATTUNED = 26136;  
+public static final int SIGIL_OF_THE_SKILLER_UNATTUNED = 26139;  
+public static final int SIGIL_OF_REMOTE_STORAGE_UNATTUNED = 26142;  
+public static final int SIGIL_OF_LAST_RECALL_UNATTUNED = 26145;  
+public static final int SIGIL_OF_THE_GUARDIAN_ANGEL_UNATTUNED = 26148;
+```
+
+
+osrs effects (deleting as i replace)
+%% Sigil of Resilience	Your hitpoints restore 3X faster than normal.	Combat
+Sigil of Consistency	Every attack does +1 damage to the target.	Combat
+Sigil of Fortification	Your defence is increased by +12 for stab, slash, crush, magic and ranged.	Combat
+Sigil of Barrows	Barrows gear never degrades, except upon death or after dropping the items.	Combat
+Sigil of Deft Strikes	You gain 20% more accuracy in all styles against all non-player enemies.	Combat
+Sigil of Freedom	Activate the Sigil to break free from bind effects cast on you by players. Consumes the Sigil upon activation.	Combat
+Sigil of Enhanced Harvest	You have a 50% chance to gain double resources from Mining, Fishing, Woodcutting or Farming.	Skilling
+
+Sigil of the Smith	When smelting Ores, smithing Bars, or making Cannonballs, all items are processed at once.	Skilling
+Sigil of the Alchemist	When cleaning Herbs or making Potions, all items will be processed at once.	Skilling
+Sigil of the Fletcher	When fletching Logs or cutting Bolt Tips, all items are processed at once.	Skilling
+Sigil of the Chef	When cooking food or making Jugs of Wine, all items are processed at once.	Skilling
+Sigil of the Craftsman	When crafting Leather, Uncut Gems, Glass, Jewellery, Pottery or Battlestaves, and when spinning Flax or Wool, all items are processed at once.	Skilling	Sigil of the Abyss	When RuneCrafting, you gain 5X as many runes as usual, and 2X the experience you would normally get.	Skilling
+Sigil of Stamina	You're permanently under the effects of a Stamina Potion.	Utility
+Sigil of the Potion Master	You have a 20% chance to not consume potions when using them. Once the effect activates, it cannot be triggered again within six seconds.	Utility
+Sigil of the Eternal Jeweller	Teleporting via the following methods will never use any charges: Master Scroll Book, Ring of Duelling, Ring of Returning, Slayer Ring, Ring of Wealth, Amulet of Glory, Games Necklace, Skills Necklace, Digsite Pendant, Combat Bracelet and Necklace of Passage.	Utility
+Sigil of the Treasure Hunter	Clue Scrolls drop 2X more often.	Utility
+Sigil of Mobility	Teleports do not consume runes and do not grant any experience.	Utility
+Sigil of Exaggeration	All non-combat skills are permanently boosted by 5.	Utility %%
\ No newline at end of file
diff --git a/playercount.txt b/playercount.txt
deleted file mode 100644
diff --git a/TamirWiki/01 - Project Management/(0.0.4) - 2025-09-16 - Woodcutting Rework pt2.md b/TamirWiki/01 - Project Management/previous versions/(0.0.4) - 2025-09-16 - Woodcutting Rework pt2.md
rename from TamirWiki/01 - Project Management/(0.0.4) - 2025-09-16 - Woodcutting Rework pt2.md
rename to TamirWiki/01 - Project Management/previous versions/(0.0.4) - 2025-09-16 - Woodcutting Rework pt2.md
diff --git a/TamirWiki/06 - Templates/Tamir Central.md b/TamirWiki/04 - Content Implementation/Maps & Regions/Tamir Central.md
rename from TamirWiki/06 - Templates/Tamir Central.md
rename to TamirWiki/04 - Content Implementation/Maps & Regions/Tamir Central.md
