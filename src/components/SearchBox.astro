---
const searchId = `search-${Math.random().toString(36).slice(2, 8)}`;
---
<div id={`${searchId}-container`} class="relative">
  <label class="sr-only" for={searchId}>Search notes</label>
  <input
    id={searchId}
    type="search"
    placeholder="Search the garden..."
    class="w-full rounded-full border border-neutral-200/70 bg-white/70 px-4 py-2 text-sm text-neutral-700 shadow-sm transition focus:border-aurora-300 focus:outline-none focus:ring-2 focus:ring-aurora-200 focus:ring-offset-2 focus:ring-offset-white dark:border-neutral-700 dark:bg-neutral-900/70 dark:text-neutral-200 dark:focus:ring-offset-neutral-950"
    autocomplete="off"
  />
  <div
    data-results
    class="invisible absolute left-0 right-0 top-full z-30 mt-2 max-h-80 overflow-auto rounded-3xl border border-neutral-200/80 bg-white/95 p-3 text-sm shadow-xl opacity-0 transition dark:border-neutral-800 dark:bg-neutral-950/95"
  >
    <ul class="divide-y divide-neutral-100 dark:divide-neutral-800" data-list></ul>
    <p data-empty class="px-3 py-6 text-center text-xs uppercase tracking-[0.3em] text-neutral-400">Start typing to explore</p>
  </div>
</div>
<script type="module">
  import FlexSearch from 'flexsearch';

  const container = document.getElementById(`${searchId}-container`);
  const input = container?.querySelector('input');
  const resultsPanel = container?.querySelector('[data-results]');
  const list = container?.querySelector('[data-list]');
  const emptyState = container?.querySelector('[data-empty]');

  let index;
  let docs = [];
  let isOpen = false;
  let activeIndex = -1;

  const openPanel = () => {
    if (!resultsPanel) return;
    resultsPanel.classList.remove('invisible');
    resultsPanel.classList.remove('opacity-0');
    resultsPanel.classList.add('opacity-100');
    isOpen = true;
  };

  const closePanel = () => {
    if (!resultsPanel) return;
    resultsPanel.classList.add('opacity-0');
    resultsPanel.classList.add('invisible');
    isOpen = false;
    activeIndex = -1;
    [...(list?.querySelectorAll('a') ?? [])].forEach((link) => link.classList.remove('bg-aurora-50/70', 'dark:bg-aurora-500/20'));
  };

  const highlight = () => {
    const links = list?.querySelectorAll('a');
    if (!links) return;
    links.forEach((link, idx) => {
      if (idx === activeIndex) {
        link.classList.add('bg-aurora-50/70', 'dark:bg-aurora-500/20');
        link.scrollIntoView({ block: 'nearest' });
      } else {
        link.classList.remove('bg-aurora-50/70', 'dark:bg-aurora-500/20');
      }
    });
  };

  const ensureIndex = async () => {
    if (index) return index;
    try {
      const response = await fetch('/garden-search.json', { cache: 'no-store' });
      docs = await response.json();
      index = new FlexSearch.Document({
        tokenize: 'forward',
        document: {
          id: 'slug',
          index: ['title', 'headings', 'excerpt', 'tags', 'folder'],
          store: ['title', 'slug', 'excerpt', 'folder'],
        },
      });
      docs.forEach((doc) => index.add(doc));
    } catch (error) {
      console.error('Failed to load search index', error);
    }
    return index;
  };

  const render = (results) => {
    if (!list || !emptyState) return;
    list.innerHTML = '';
    if (!results || results.length === 0) {
      emptyState.textContent = input?.value ? 'No matches yet â€” refine your query' : 'Start typing to explore';
      emptyState.classList.remove('hidden');
      return;
    }
    emptyState.classList.add('hidden');
    const fragment = document.createDocumentFragment();
    results.slice(0, 10).forEach((result) => {
      const item = docs.find((doc) => doc.slug === result);
      if (!item) return;
      const li = document.createElement('li');
      const anchor = document.createElement('a');
      anchor.href = `/garden/${item.slug}/`;
      anchor.className = 'block rounded-2xl px-4 py-3 transition hover:bg-aurora-50/70 hover:text-aurora-700 dark:hover:bg-aurora-500/20';
      anchor.innerHTML = `
        <span class="font-medium text-neutral-900 dark:text-neutral-100">${item.title}</span>
        ${item.folder ? `<span class="mt-1 block text-xs uppercase tracking-[0.2em] text-neutral-400">${item.folder}</span>` : ''}
        ${item.excerpt ? `<span class="mt-2 block text-sm text-neutral-600 dark:text-neutral-300">${item.excerpt}</span>` : ''}
      `;
      li.appendChild(anchor);
      fragment.appendChild(li);
    });
    list.appendChild(fragment);
    activeIndex = -1;
  };

  if (input) {
    input.addEventListener('focus', async () => {
      await ensureIndex();
      openPanel();
      if (!input.value) {
        render([]);
      }
    });

    input.addEventListener('input', async () => {
      const value = input.value.trim();
      await ensureIndex();
      if (!value) {
        render([]);
        return;
      }
      const matches = index ? index.search(value, { enrich: true, limit: 10 }) : [];
      const unique = [];
      const seen = new Set();
      for (const group of matches) {
        for (const item of group.result || []) {
          if (!seen.has(item)) {
            seen.add(item);
            unique.push(item);
          }
        }
      }
      render(unique);
      openPanel();
    });

    input.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        closePanel();
        input.blur();
        return;
      }
      if (!isOpen) return;
      const links = list?.querySelectorAll('a');
      if (!links || links.length === 0) return;
      if (event.key === 'ArrowDown') {
        event.preventDefault();
        activeIndex = (activeIndex + 1) % links.length;
        highlight();
      } else if (event.key === 'ArrowUp') {
        event.preventDefault();
        activeIndex = (activeIndex - 1 + links.length) % links.length;
        highlight();
      } else if (event.key === 'Enter') {
        if (activeIndex >= 0 && activeIndex < links.length) {
          const link = links[activeIndex];
          link.click();
        }
      }
    });
  }

  document.addEventListener('click', (event) => {
    if (!container || !isOpen) return;
    if (!container.contains(event.target)) {
      closePanel();
    }
  });

  window.addEventListener('keydown', (event) => {
    if (event.defaultPrevented) return;
    if (event.key === '/' && document.activeElement !== input) {
      const tag = document.activeElement?.tagName;
      if (tag && ['INPUT', 'TEXTAREA'].includes(tag)) return;
      event.preventDefault();
      input?.focus();
      input?.select();
    }
  });
</script>
