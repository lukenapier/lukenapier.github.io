---
import type { CollectionEntry } from 'astro:content';

interface HeadingEntry {
  depth: number;
  slug: string;
  text: string;
}

interface NavLink {
  title: string;
  slug: string;
}

const { note, headings = [], previous, next } = Astro.props as {
  note: CollectionEntry<'notes'>;
  headings: { depth: number; slug: string; text: string }[];
  previous?: NavLink | null;
  next?: NavLink | null;
};

const formattedDate = note.data.date ? new Date(note.data.date).toLocaleDateString(undefined, {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}) : null;

const noteTags = note.data.tags ?? [];
const toc = headings.filter((heading) => heading.depth <= 3);
const hasToc = toc.length > 1;
---
<div class="mx-auto grid w-full gap-10 lg:grid-cols-[minmax(0,1fr)_280px]">
  <article class="prose prose-neutral max-w-none dark:prose-invert">
    <header class="mb-10 border-b border-neutral-200/80 pb-6 dark:border-neutral-800/80">
      <p class="text-sm uppercase tracking-[0.2em] text-aurora-500">{note.data.folder ? note.data.folder : 'Mind Garden'}</p>
      <h1 class="mt-3 text-4xl font-light tracking-tight text-neutral-900 dark:text-neutral-50">{note.data.title}</h1>
      {formattedDate && (
        <p class="mt-2 text-sm text-neutral-500 dark:text-neutral-400">Updated {formattedDate}</p>
      )}
      {noteTags.length > 0 && (
        <ul class="mt-4 flex flex-wrap gap-2">
          {noteTags.map((tag) => (
            <li key={tag} class="rounded-full border border-aurora-200/70 bg-aurora-50/50 px-3 py-1 text-xs font-medium uppercase tracking-wide text-aurora-600 dark:border-aurora-500/30 dark:bg-aurora-500/10 dark:text-aurora-200">
              #{tag}
            </li>
          ))}
        </ul>
      )}
    </header>
    <div class="relative">
      <slot />
    </div>
    {(previous || next) && (
      <nav class="mt-12 flex flex-col gap-4 border-t border-neutral-200/80 pt-6 text-sm dark:border-neutral-800/80 md:flex-row md:justify-between">
        {previous ? (
          <a class="group flex-1 rounded-2xl border border-transparent bg-white/60 p-4 transition hover:border-aurora-200 hover:bg-white/80 dark:bg-neutral-900/40 dark:hover:border-aurora-400/40" href={`/garden/${previous.slug}/`}>
            <span class="text-xs font-semibold uppercase tracking-wide text-neutral-400">Previous</span>
            <span class="mt-1 block text-base font-medium text-neutral-900 transition group-hover:text-aurora-600 dark:text-neutral-100">
              {previous.title}
            </span>
          </a>
        ) : (
          <span class="flex-1" />
        )}
        {next ? (
          <a class="group flex-1 rounded-2xl border border-transparent bg-white/60 p-4 text-right transition hover:border-aurora-200 hover:bg-white/80 dark:bg-neutral-900/40 dark:hover:border-aurora-400/40" href={`/garden/${next.slug}/`}>
            <span class="text-xs font-semibold uppercase tracking-wide text-neutral-400">Next</span>
            <span class="mt-1 block text-base font-medium text-neutral-900 transition group-hover:text-aurora-600 dark:text-neutral-100">
              {next.title}
            </span>
          </a>
        ) : (
          <span class="flex-1" />
        )}
      </nav>
    )}
  </article>
  <aside class="hidden lg:block">
    {hasToc && (
      <div class="sticky top-28 rounded-3xl border border-white/40 bg-white/70 p-6 text-sm shadow-md backdrop-blur-xl dark:border-white/10 dark:bg-neutral-900/60">
        <h2 class="text-xs font-semibold uppercase tracking-[0.25em] text-neutral-500">On this page</h2>
        <ul class="mt-4 space-y-2">
          {toc.map((heading) => (
            <li key={heading.slug} style={{ paddingLeft: `${Math.max(0, heading.depth - 1) * 0.75}rem` }}>
              <a href={`#${heading.slug}`} class="block rounded-lg px-3 py-1 text-neutral-600 transition hover:text-aurora-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-aurora-300 dark:text-neutral-300">
                {heading.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    )}
  </aside>
</div>
<script>
  const codeBlocks = Array.from(document.querySelectorAll('pre')); 
  for (const pre of codeBlocks) {
    if (pre.querySelector('.copy-button')) continue;
    const button = document.createElement('button');
    button.type = 'button';
    button.textContent = 'Copy';
    button.className = 'copy-button absolute right-3 top-3 rounded-full border border-neutral-200/60 bg-white/70 px-3 py-1 text-xs font-medium text-neutral-500 shadow-sm transition hover:border-aurora-300 hover:text-aurora-500 dark:border-neutral-700 dark:bg-neutral-900/70 dark:text-neutral-300';
    button.addEventListener('click', async () => {
      const code = pre.querySelector('code');
      if (!code) return;
      const text = code.textContent ?? '';
      try {
        await navigator.clipboard.writeText(text);
        button.textContent = 'Copied';
        button.classList.add('text-aurora-600');
        setTimeout(() => {
          button.textContent = 'Copy';
          button.classList.remove('text-aurora-600');
        }, 1600);
      } catch (error) {
        button.textContent = 'Error';
        setTimeout(() => {
          button.textContent = 'Copy';
        }, 1600);
      }
    });
    pre.classList.add('relative');
    pre.appendChild(button);
  }
</script>
