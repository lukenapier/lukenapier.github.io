---
import { getCollection, getEntryBySlug, type CollectionEntry } from 'astro:content';
import GardenLayout from '../../layouts/GardenLayout.astro';
import MarkdownLayout from '../../components/MarkdownLayout.astro';

interface NavLink {
  title: string;
  slug: string;
}

export async function getStaticPaths() {
  const notes = await getCollection('notes');
  const groups = new Map<string, CollectionEntry<'notes'>[]>();
  for (const note of notes) {
    const folder = note.slug.split('/').slice(0, -1).join('/');
    const bucket = groups.get(folder) ?? [];
    bucket.push(note);
    groups.set(folder, bucket);
  }
  for (const entries of groups.values()) {
    entries.sort((a, b) => (a.data.title ?? a.slug).localeCompare(b.data.title ?? b.slug));
  }
  return notes.map((note) => {
    const folder = note.slug.split('/').slice(0, -1).join('/');
    const ordered = groups.get(folder) ?? [];
    const index = ordered.findIndex((entry) => entry.slug === note.slug);
    const previous = index > 0 ? { slug: ordered[index - 1].slug, title: ordered[index - 1].data.title } : null;
    const next = index < ordered.length - 1 ? { slug: ordered[index + 1].slug, title: ordered[index + 1].data.title } : null;
    return {
      params: { slug: note.slug },
      props: {
        slug: note.slug,
        previous,
        next,
      },
    };
  });
}

const { slug, previous, next } = Astro.props as {
  slug: string;
  previous: NavLink | null;
  next: NavLink | null;
};

const note = await getEntryBySlug('notes', slug);
if (!note) {
  throw new Error(`Note not found: ${slug}`);
}

const { Content, headings } = await note.render();

const slugSegments = note.slug.split('/');
const breadcrumbs = slugSegments.slice(0, -1).map((segment, index) => ({
  label: segment.replace(/-/g, ' ').replace(/\b\w/g, (c) => c.toUpperCase()),
  href: `/garden/${slugSegments.slice(0, index + 1).join('/')}/`,
}));
---
<GardenLayout title={note.data.title} breadcrumbs={[...breadcrumbs, { label: note.data.title }] }>
  <MarkdownLayout note={note} headings={headings} previous={previous} next={next}>
    <Content />
  </MarkdownLayout>
</GardenLayout>
