---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import GardenLayout from '../../layouts/GardenLayout.astro';
import FileTree from '../../components/FileTree.astro';
import NoteList from '../../components/NoteList.astro';

const notes = await getCollection('notes');
const vaultFolder = import.meta.env.MIND_GARDEN_VAULT_DIR ?? 'Tamir';

const formatDate = (date?: string) => {
  if (!date) return undefined;
  const parsed = new Date(date);
  if (Number.isNaN(parsed.getTime())) return undefined;
  return parsed.toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' });
};

const buildExcerpt = (entry: CollectionEntry<'notes'>) => {
  const content = entry.body ?? '';
  const stripped = content
    .replace(/```[\s\S]*?```/g, ' ')
    .replace(/`[^`]+`/g, ' ')
    .replace(/\[(.*?)\]\(.*?\)/g, '$1')
    .replace(/\*\*?|__|~~|>/g, ' ')
    .replace(/!\[[^\]]*\]\([^)]*\)/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();
  return stripped.length > 160 ? `${stripped.slice(0, 157)}…` : stripped;
};

const folders = new Map<string, CollectionEntry<'notes'>[]>();
for (const note of notes) {
  const segments = note.slug.split('/');
  const group = segments.length > 1 ? segments[0] : '';
  const bucket = folders.get(group) ?? [];
  bucket.push(note);
  folders.set(group, bucket);
}

const sections = Array.from(folders.entries())
  .sort(([a], [b]) => a.localeCompare(b))
  .map(([name, entries]) => ({
    name: name ? name.replace(/-/g, ' ').replace(/\b\w/g, (c) => c.toUpperCase()) : 'Loose Notes',
    notes: entries
      .sort((a, b) => (b.data.date ?? '').localeCompare(a.data.date ?? ''))
      .map((entry) => ({
        title: entry.data.title,
        slug: entry.slug,
        date: formatDate(entry.data.date),
        excerpt: buildExcerpt(entry),
      })),
  }));

const recentNotes = notes
  .slice()
  .sort((a, b) => (b.data.date ?? '').localeCompare(a.data.date ?? ''))
  .slice(0, 5)
  .map((entry) => ({
    title: entry.data.title,
    slug: entry.slug,
    date: formatDate(entry.data.date),
    excerpt: buildExcerpt(entry),
    folder: entry.data.folder,
  }));
---
<GardenLayout title="Garden Home">
  <section class="mb-12 space-y-4">
    <h1 class="text-4xl font-light tracking-tight text-neutral-900 dark:text-neutral-50">Lucas’s Mind Garden</h1>
    <p class="max-w-2xl text-lg text-neutral-600 dark:text-neutral-300">
      Welcome to the garden: a quiet place where ideas take root and branch into new constellations. Browse by collection, skim the latest additions, or jump straight into a note that calls to you.
    </p>
  </section>

  {notes.length === 0 ? (
    <div class="surface-card text-center text-neutral-500 dark:text-neutral-300">
      <p>
        No notes have sprouted yet. Add Markdown files to the
        <code class="rounded bg-neutral-100 px-2 py-1 text-sm dark:bg-neutral-800">/{vaultFolder}</code>
        folder to populate the garden.
      </p>
    </div>
  ) : (
    <div class="space-y-10">
      <NoteList notes={recentNotes} title="Fresh Growth" />
      <FileTree sections={sections} />
    </div>
  )}
</GardenLayout>
